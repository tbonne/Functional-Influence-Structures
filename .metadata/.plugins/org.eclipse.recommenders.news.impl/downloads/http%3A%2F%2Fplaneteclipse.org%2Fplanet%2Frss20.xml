<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Kichwa Coders: Getting Started With Eclipse Che on Windows 10</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1220</guid>
	<link>https://kichwacoders.com/2017/02/14/getting-started-with-eclipse-che-on-windows-10/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;chewindows&quot; class=&quot;alignnone size-full wp-image-1136&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/chewindows1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Over the last year or so there has been a reasonable amount of evolution of the best way to get &lt;a href=&quot;https://kichwacoders.com/2016/07/05/is-eclipse-che-really-the-next-generation-eclipse-ide/&quot; target=&quot;_blank&quot;&gt;Eclipse Che&lt;/a&gt; running on Windows. The latest set of instructions are reasonably straightforward though not a complete no-brainer. This post records my snapshot of the step-by-step install process for Eclipse Che 5.2.2 including Docker install, dead ends &amp;amp; false starts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The aim is to set up a local install of pre-built Che on Windows 10 Home Edition. Starting point, scan documentation at &lt;a href=&quot;https://www.eclipse.org/che/docs/setup/getting-started/&quot;&gt;https://www.eclipse.org/che/docs/setup/getting-started/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install prerequisite Docker. Download &amp;amp; install ‘&lt;a href=&quot;https://docs.docker.com/docker-for-windows&quot; target=&quot;_blank&quot;&gt;Docker for Windows&lt;/a&gt;’. Helpful error message redirects me to use Docker Toolbox. &lt;img alt=&quot;dockerforwindows&quot; class=&quot;aligncenter size-medium wp-image-1140&quot; height=&quot;235&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/dockerforwindows.png?w=300&amp;amp;h=235&quot; width=&quot;300&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Download &lt;a href=&quot;https://www.docker.com/products/docker-toolbox&quot; target=&quot;_blank&quot;&gt;Docker Toolbox&lt;/a&gt; for Windows. Run installer. Requires 77.6M, and also wants to install Git.  The reason it needs to install a full source control system is merely down to the fact that the Git install comes with a nicely packaged bash &amp;amp; terminal implementation. Nevertheless I already have git installed so no need to here.&lt;/li&gt;
&lt;li&gt;Install completes, use shortcut ‘Docker Quickstart Terminal’ doesn’t work as it can’t find bash.exe (The shortcut expects Git to be in a certain default location).&lt;/li&gt;
&lt;li&gt;Update shortcut to point at my installed version of Git’s bash.exe (after another false start trying to use Git’s bash directly, fiddling with running things as Admin, etc).&lt;/li&gt;
&lt;li&gt;Success &amp;amp; I can run docker run hello-world&lt;img alt=&quot;helloworlddocker&quot; class=&quot;aligncenter size-full wp-image-1172&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/helloworlddocker.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Now to the actual Eclipse Che part, try default command line
&lt;pre class=&quot;brush: plain; light: true; title: ; notranslate&quot;&gt;docker run -it eclipse/che start&lt;/pre&gt;
&lt;p&gt;Not so hasty there, a helpful error message tells me I’m missing a mandatory parameter.&lt;img alt=&quot;cherun1&quot; class=&quot;aligncenter size-full wp-image-1177&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/cherun1.png?w=840&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Add in missing parameter, try again
&lt;pre class=&quot;brush: plain; light: true; title: ; notranslate&quot;&gt;docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock \
    eclipse/che start&lt;/pre&gt;
&lt;p&gt;Get another useful message about needing to mount a directory to save data:&lt;img alt=&quot;cherun2&quot; class=&quot; size-full wp-image-1183 aligncenter&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/cherun2.png?w=840&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt; Create a temporary directory and rerun the command specifying a data directory. Get a warning about data folder needing to be in %userprofile% (now you tell me). &lt;img alt=&quot;cherun3&quot; class=&quot;aligncenter size-full wp-image-1187&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/cherun3.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Make a different directory and run command again
&lt;pre class=&quot;brush: plain; light: true; title: ; notranslate&quot;&gt;docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock \
    -v /c/Users/tracy/tmp:/data eclipse/che start&lt;/pre&gt;
&lt;p&gt;Success!&lt;img alt=&quot;cherun4&quot; class=&quot; size-full wp-image-1198 aligncenter&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/cherun4.png?w=840&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Launch up browser, point at &lt;a href=&quot;http://192.168.99.100:8080&quot; rel=&quot;nofollow&quot;&gt;http://192.168.99.100:8080&lt;/a&gt;, Eclipse Che is up and running.&lt;img alt=&quot;chewindows&quot; class=&quot;alignnone size-full wp-image-1136&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/chewindows1.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1220/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1220&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 14 Feb 2017 13:29:20 +0000</pubDate>
</item>
<item>
	<title>Stefan Winkler: MultiPageEditor with Xtext</title>
	<guid isPermaLink="true">https://www.winklerweb.net/index.php/blog/12-eclipse/26-multipageeditor-with-xtext</guid>
	<link>https://www.winklerweb.net/index.php/blog/12-eclipse/26-multipageeditor-with-xtext</link>
	<description>&lt;p&gt;Domain specific languages are a great tool when we want to give our users control over complex aspects in our applications; and in most cases, experienced uses can learn syntax and semantics of a well-designed DSL quickly. But on the other hand, there are also inexperienced users, who usually struggle with DSLs and do not want to deal with textual input. Instead, they are used to graphical user interfaces which help them to grasp the structure of information and to enter new data.&lt;/p&gt;
&lt;p&gt;Last week, I had a project, in which I needed to provide both groups of users with a suitable user interface. In other words, I needed to create an editor, which provides both an Xtext source editor for my DSL, and a GUI editor for the model behind the DSL.&lt;/p&gt;
&lt;p&gt;I started to search the Internet for some hints on how to do this but I did not find a complete example. Basically, to combine multiple editors into a single one, we have to subclass and implement an &lt;code&gt;org.eclipse.ui.part.MultiPageEditorPart&lt;/code&gt;. But I did not find more than hints about how to share the model between an Xtext editor and another editor. So, I started experimenting and after some time I was successful, and I wanted to let you participate in my results. Maybe this helps someone who is looking for an example as well.&lt;/p&gt;
&lt;p&gt;For the rest of this post, I will use the state machine example that comes with the Xtext distribution as a starting point. To demonstrate the solution I will add a GUI editor for events to the generated Xtext editor. For brevity, I will only show the relevant parts. The full modified example source code is available on &lt;a href=&quot;https://github.com/xpomul/xtext-multi-edit-example&quot; rel=&quot;alternate&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Step 1: Setup&lt;/h2&gt;
&lt;p&gt;To get started, we create the State Machine Example (File &amp;gt; New… &amp;gt; Xtext &amp;gt; Xtext State-Machine Example) in our workspace. The example code is a bit old; to be able to use Java 8 features, we need to switch the Execution Environment, Java Compiler Settings and Java Library Path to Java 1.8.&lt;/p&gt;
&lt;h2&gt;Step 2: Create the MultiPageEditor&lt;/h2&gt;
&lt;p&gt;Inside the UI bundle, I have created a new package &lt;code&gt;org.eclipse.xtext.example.fowlerdsl.ui.editor&lt;/code&gt; for my editor code. In there, I have created the class &lt;code&gt;StatemachineMultiPageEditor&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;StatemachineMultiPageEditor&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;extends&lt;/span&gt; MultiPageEditorPart
&lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #888888;&quot;&gt;// get the default XtextEditor injected to use as a page&lt;/span&gt;
  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Inject&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; XtextEditor sourceEditor&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; sourcePageIndex&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #888888;&quot;&gt;// create and name our editor page&lt;/span&gt;
  &lt;span style=&quot;color: #888888;&quot;&gt;// The instance is already injected. We only have to add it to the MultiPageEditorPart&lt;/span&gt;
  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;createPages&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;sourcePageIndex&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; addPage&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;sourceEditor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; getEditorInput&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;
      setPageText&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;sourcePageIndex&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;PartInitException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Failed to add Xtext editor&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; e&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #888888;&quot;&gt;// there are a few abstract methods, we need to implement. &lt;/span&gt;
  &lt;span style=&quot;color: #888888;&quot;&gt;// Because the XtextEditor is the master regarding model management, we just delegate every call there &lt;/span&gt;
  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;doSave&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; IProgressMonitor monitor&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;sourceEditor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;doSave&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;monitor&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #888888;&quot;&gt;// ... other methods likewise&lt;/span&gt;
&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This implementation more or less just wraps the Xtext editor. To enable it in the runtime application, we can edit the &lt;code&gt;plugin.xml&lt;/code&gt; and replace the &lt;code&gt;XtextEditor&lt;/code&gt; which is configured by Xtext with our own implementation:&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;extension&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;point=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.eclipse.ui.editors&quot;&lt;/span&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;editor&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.eclipse.xtext.example.fowlerdsl.ui.StatemachineExecutableExtensionFactory:org.eclipse.xtext.example.fowlerdsl.ui.editor.StatemachineMultiPageEditor&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;contributorClass=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.eclipse.ui.editors.text.TextEditorActionContributor&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;default=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;extensions=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;statemachine&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;id=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.eclipse.xtext.example.fowlerdsl.Statemachine&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #0000cc;&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Statemachine Editor&quot;&lt;/span&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/editor&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When we start the runtime application, we should be able to create a state machine file (see &lt;code&gt;README&lt;/code&gt; in the example project for instructions) and when opening it, we should see that it opens in our own &lt;code&gt;StatemachineMultiPageEditor&lt;/code&gt;, which has a single tab called “Source”.&lt;/p&gt;
&lt;h2&gt;Step 3: Create the UI editor&lt;/h2&gt;
&lt;p&gt;Now comes the interesting part. To implement our own editor, we need a suitable editor input which provides our editor with access to the &lt;code&gt;XtextEditor&lt;/code&gt; model, which is the &lt;code&gt;XtextDocument&lt;/code&gt;. So, I decided to wrap the &lt;code&gt;IXtextDocument&lt;/code&gt; in an &lt;code&gt;IEditorInput&lt;/code&gt; for our own editor:&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;XtextDocumentBasedEditorInput&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;implements&lt;/span&gt; IEditorInput
&lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; IXtextDocument document&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; IFile file&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;XtextDocumentBasedEditorInput&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; IXtextDocument document&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;document&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; document&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;file&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; document&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getAdapter&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;IFile&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; IXtextDocument &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;getDocument&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;document&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;exists&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;exists&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; ImageDescriptor &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;getImageDescriptor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getAdapter&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;IWorkbenchAdapter&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getImageDescriptor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
  
  &lt;span style=&quot;color: #888888;&quot;&gt;// the other methods delegate similarly &lt;/span&gt;
  &lt;span style=&quot;color: #888888;&quot;&gt;// ...&lt;/span&gt;
&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Based on this, we can implement the GUI editor. For this simple example, we will just have a &lt;code&gt;ListViewer&lt;/code&gt; showing the list of &lt;code&gt;Event&lt;/code&gt;s and three buttons (add, edit, delete).&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;EventEditor&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;extends&lt;/span&gt; EditorPart
&lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; XtextDocumentBasedEditorInput xtextEditorInput&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; ListViewer listViewer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
  
  &lt;span style=&quot;color: #888888;&quot;&gt;// &amp;lt;irrelevant methods omitted&amp;gt;&lt;/span&gt;

  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;createPartControl&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; Composite parent&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #888888;&quot;&gt;// &amp;lt;some GUI code omitted&amp;gt;&lt;/span&gt;
    
    &lt;span style=&quot;color: #888888;&quot;&gt;// create the list viewer&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;listViewer&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ListViewer&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;mainComposite&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; SWT&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;BORDER&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;listViewer&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getControl&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setLayoutData&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;GridDataFactory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;fillDefaults&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;grab&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;create&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;listViewer&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setContentProvider&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayContentProvider&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;listViewer&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setLabelProvider&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; LabelProvider&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
      &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; String &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;getText&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; Object element&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
      &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;element &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;instanceof&lt;/span&gt; Event&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
          Event event &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Event&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; element&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
          &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; event&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot; [&quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; event&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getCode&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getText&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;element&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
      &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;

    &lt;span style=&quot;color: #888888;&quot;&gt;// create the buttons&lt;/span&gt;
    Composite buttonComposite &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Composite&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;mainComposite&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; SWT&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;NONE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    buttonComposite&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setLayout&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; FillLayout&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;SWT&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;VERTICAL&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;
    buttonComposite&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setLayoutData&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;GridDataFactory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;swtDefaults&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;create&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;
    Button addButton &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Button&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buttonComposite&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; SWT&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;PUSH&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    addButton&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setText&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Add&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    addButton&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addListener&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;SWT&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Selection&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; e &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; addEvent&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;

    &lt;span style=&quot;color: #888888;&quot;&gt;// &amp;lt;edit and remove button likewise&amp;gt;&lt;/span&gt;

    &lt;span style=&quot;color: #888888;&quot;&gt;// Synchonize the list viewer input with the Xtext document&lt;/span&gt;
    refreshInput&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * Recalculates the input to the list viewer, so it is in sync with the source in the Xtext editor.&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * This is called - when the page becomes visible - after performing an edit operation&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   */&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;refreshInput&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    IXtextDocument doc &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;xtextEditorInput&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getDocument&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
    Collection&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;Event&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; events &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; doc&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;readOnly&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;res &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; EcoreUtil&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;copyAll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(((&lt;/span&gt;Statemachine&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; res&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getContents&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getEvents&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()));&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;listViewer&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setInput&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;events&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;toArray&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * Add a new event.&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * This initializes a new Event object, opens the dialog to let the user specify the event information and if the user closes the dialog by clicking ok, the&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   * new event is added to the Xtext document.&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;   */&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;addEvent&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    Event event &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; StatemachineFactory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;eINSTANCE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;createEvent&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
    event&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;newEvent&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    event&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setCode&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;CODE&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;

    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; result &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; EditEventDialog&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;editEvent&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;getSite&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getShell&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(),&lt;/span&gt; event&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;result&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      IXtextDocument doc &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;xtextEditorInput&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getDocument&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
      doc&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;modify&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;res &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;((&lt;/span&gt;Statemachine&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; res&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getContents&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getEvents&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;event&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

    refreshInput&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
  
  &lt;span style=&quot;color: #888888;&quot;&gt;// &amp;lt;event handlers for edit and remove button omitted&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The interesting methods here are &lt;code&gt;refreshInput()&lt;/code&gt; and &lt;code&gt;addEvent()&lt;/code&gt;. They use the &lt;code&gt;XtextDocument&lt;/code&gt; to access the model in its (dirty) state and/or to manipulate it. It is important to note that the custom code should not hold on to the EMF instances retrieved this way, because when the text is reparsed, Xtext usually throws away old &lt;code&gt;EObject&lt;/code&gt; instances and create new ones. Likewise, when modifying the model, make sure that you use the &lt;code&gt;XtextResource&lt;/code&gt; and own copies of the information to navigate to the desired model element(s), instead of using previously retrieved &lt;code&gt;EObject&lt;/code&gt;s etc.&lt;/p&gt;
&lt;h2&gt;Step 4: Add the UI editor as a page to the MultiPageEditor&lt;/h2&gt;
&lt;p&gt;Now we need to add our &lt;code&gt;EventEditor&lt;/code&gt; to the &lt;code&gt;StatemachineMultiPageEditor&lt;/code&gt;. We let Guice inject our editor just like the &lt;code&gt;XtextEditor&lt;/code&gt;. Then we create the editor input and add a second page with our new &lt;code&gt;EventEditor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we need to take care of the synchronization between the editors. We could have our editor install a listener on the &lt;code&gt;XtextDocument&lt;/code&gt;, so that we get notified on any change. But I decided that it should be enough (and is simpler) to refresh the GUI whenever the user switches the page and the &lt;code&gt;EventEditor&lt;/code&gt; becomes visible. To do this, we override the method &lt;code&gt;pageChange()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The resulting changes to the StatemachineMultiPageEditor look like this:&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;StatemachineMultiPageEditor&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;extends&lt;/span&gt; MultiPageEditorPart
&lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #888888;&quot;&gt;// ...&lt;/span&gt;
  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Inject&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; EventEditor formEditor&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; formPageIndex&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;createPages&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #888888;&quot;&gt;// ...&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;formPageIndex&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; addPage&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;formEditor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; XtextDocumentBasedEditorInput&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;sourceEditor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getDocument&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()));&lt;/span&gt;
      setPageText&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;formPageIndex&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;States&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;PartInitException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Failed to add State editor&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; e&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;
  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;pageChange&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; newPageIndex&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;newPageIndex &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;formPageIndex&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #888888;&quot;&gt;// when the GUI editor becomes visible, synchronize with the Xtext document&lt;/span&gt;
      &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;formEditor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;refreshInput&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;
    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pageChange&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;newPageIndex&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;
  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And here is a small demo of the running editor:&lt;/p&gt;
&lt;p&gt; &lt;img alt=&quot;Editor in Action&quot; class=&quot;pull-center&quot; src=&quot;https://www.winklerweb.net/images/stories/blog/XtextMultiPageEditor.gif&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Odds and Ends&lt;/h2&gt;
&lt;p&gt;Of course, this example is only a proof of concept and not fully implemented in all detail. For example, validation in the GUI is completely missing. So far, I have not found a good way to include Xtext validation in the GUI (it would be nice to have a name or code checked against the DSL syntax instead of writing an own validator). Also, some additional cases must be handled (for example, what happens if the list of events becomes empty or if there are events with the same name etc.)&lt;/p&gt;
&lt;p&gt;Additionally, to have a good interoperability between DSL source and GUI, you have to customize the formatter so that generated model elements are serialized nicely (not like in my example). Also keep in mind that hidden tokens (such as comments) are not represented in the model itself and could be deleted by accident in model modification operations.&lt;/p&gt;
&lt;p&gt;{jcomments on}&lt;/p&gt;</description>
	<pubDate>Tue, 14 Feb 2017 12:34:03 +0000</pubDate>
</item>
<item>
	<title>Antoine Thomas: Introduction to WireframeSketcher</title>
	<guid isPermaLink="false">http://blog.ttoine.net/?p=1194</guid>
	<link>http://blog.ttoine.net/en/2017/02/14/introduction-to-wireframesketcher/</link>
	<description>&lt;p&gt;WireframeSketcher is based on &lt;a href=&quot;http://www.eclipse.org&quot;&gt;Eclipse&lt;/a&gt; platform. I use it a lot to create mockups for websites and applications. It helps to focus on content, usability and features, instead of design. When your mockup is tested with future end users and documented for developers, it’s time think about design.&lt;/p&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Eclipse users will not be disappointed, the workbench is quite the same, but in the middle, you draw instead of writing code. Also, instead of just drawing basic shape, there is a style added so everything looks like it has been done on paper with a pen. This way, in the mind of people looking at the mockup, you are sure they think about it as a mockup, and not as a definitive design.&lt;/p&gt;
&lt;p&gt;You can also add annotations for documentation purpose.&lt;/p&gt;
&lt;p&gt;And you can create links on items to other screens, in order to create a live mockup. You can play the live mockup in Wireframesketcher, and also export in HTML to share it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ttoine.net/files/2017/01/fullscreen-17-01-2017--11-44.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-1196 colorbox-1194&quot; height=&quot;640&quot; src=&quot;http://blog.ttoine.net/files/2017/01/fullscreen-17-01-2017--11-44-1024x640.png&quot; width=&quot;1024&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;First project&lt;/h3&gt;
&lt;p&gt;Menu: File / New / Wireframe project&lt;/p&gt;
&lt;p&gt;You can select different type of project, from web to smartphone app, …&lt;/p&gt;
&lt;h3&gt;Assets&lt;/h3&gt;
&lt;p&gt;You might want to build a mockup using elements you already have: logo, screenshots or pictures, icons, … You can add them to the “assets” folder of WireframeSketcher folder. They will be available on the right column. When possible add SVG files, so that the software can apply the “hand style”.&lt;/p&gt;
&lt;p&gt;WireframeSketcher provides Stencils, it is libraries of screens, icons, mockups, ready to use. You can find them on their website:&lt;br /&gt;
&lt;a href=&quot;http://wireframesketcher.com/mockups/index.html&quot;&gt;http://wireframesketcher.com/mockups/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Icons&lt;/h3&gt;
&lt;p&gt;You can add an icon alone or with a label, by adding the “Icon” element from the palette.&lt;/p&gt;
&lt;p&gt;It is also possible to add icons in some content (text) or attached to an item (button, input, …). To attach an icon to an item, you can click on the properties on the left sidebar, and you can browse the different icon librairies available. With text, you can start to type the name of an icon in { } and use ctrl+space to display some help.&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;p&gt;Draw at least 2 screens. You can add links to another screen on elements like buttons, but also on text. Text must be between [ ] to be considered as link. You can’t add links to external resource.&lt;/p&gt;
&lt;p&gt;In a screen, select the element. On the left sidebar, next to “Properties”, select “Links”. You will find a list of possible links, just click on the one you want and select the screen to open. That’s all. You will notice the link on the mockup with a special small yellow icon on the item.&lt;/p&gt;
&lt;p&gt;The most difficult part of it is to think about the structure, all the links between all the pages. On a live demo, you can highlight links, so testers can easily find the clickable areas.&lt;/p&gt;
&lt;h3&gt;Annotations&lt;/h3&gt;
&lt;p&gt;On the right column you will find annotations elements. You can of course change the colour. If you need to use an other element (a square, a round, …), and make it an annotation, you can do that in the menu: Object / Mark as annotation.&lt;/p&gt;
&lt;p&gt;During export, you can choose if you want to see them, or hide them.&lt;/p&gt;
&lt;h3&gt;Storyboard&lt;/h3&gt;
&lt;p&gt;A storyboard is what will allow you to run the mockup. Put in it all the screens. Be careful about the order of the screens, so the user starts the mockups at the good place. Once done, you can run or export your live mockup.&lt;/p&gt;
&lt;p&gt;During a live demo, users will be able to click on the links, or to use left and right keyboard arrows.&lt;/p&gt;
&lt;h3&gt;Missing features&lt;/h3&gt;
&lt;p&gt;IMHO, there are two issues with the current version of Wireframesketcher:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can’t hide annotation while working on the screen, so if you have stuff below, you can not select them. It’s really bad for productivity. There should be at least a layer management system, so one can put all the annotations in one layer and hide them. This is really a missing feature. &lt;a href=&quot;http://wireframesketcher.com/forum/topic/166289/add_an_annotation_feature?p5&quot;&gt;I already discussed about it on the user forum&lt;/a&gt;, the solution they propose is not really useful. And there is no workaround.&lt;/li&gt;
&lt;li&gt;There are a lot of &lt;a href=&quot;http://wireframesketcher.com/help/help.html#working_with_screens/editing_text&quot;&gt;text styling options&lt;/a&gt;, but no equivalent of the “pre” html tag. It means there is &lt;a href=&quot;http://wireframesketcher.com/forum/topic/166375/mono_type_font?p1&quot;&gt;no way to add monotype text&lt;/a&gt;.  Let say you want to show how command line or code should look in a design, with fixed characters size, this is not possible. If you are interested too, do not hesitate to tell the developers on the forum.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Despite a few missing features, I really appreciate WireframeSketcher to work on features and UX. I use it at the moment mainly for web stuff. However, I really think that would be awesome to have Eclipse Platform stencils. This way, Eclipse developers could use that to work on their UI/UX before starting to code, collect end user feedback. And also, very important thing, this would be great to share best practice and have a more consistant UI across different Eclipse plugins, applications, tools, …&lt;/p&gt;</description>
	<pubDate>Tue, 14 Feb 2017 11:00:58 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che – Day 1: Run Che and Import existing EMF project</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27822</guid>
	<link>http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we share our experience with extending &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and describe how we have built initial EMF support for the Eclipse Che IDE. In the last blog post (TBD Add link), we have described our overall goals and the use case.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog post, we describe the first steps in getting started with Che. Before we start to extend Che, let’s run it and see what’s already there. To get started, let us explore the simplest way to get an existing modeling project into a Che workspace. The modeling project is not yet created by Che, but by an Eclipse Modeling Tools IDE. By importing this existing project, we can see what features are already there and what we are going to need to extend later.&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a template project, we will be using the existing “Make it happen!” model (see more details &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2013/06/13/emf-client-platform-make-it-happen-day-0-and-1/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;). This example model is also shipped with every Eclipse Modeling Tools IDE (don’t confuse the desktop IDE with Eclipse Che here), you can instantiate it with New =&amp;gt; Example =&amp;gt; “Make it happen: Example Model”. The template project already contains generated code. As we will later want to do this directly in Che, we created a version of the “Make it happen!” model without the generated code (“makeinhappen_blank”), which is available here: &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://github.com/eclipsesource/emfforms-makeithappen-blank&quot;&gt;https://github.com/eclipsesource/emfforms-makeithappen-blank&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a preparation, we have just downloaded and execute Che as described &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/che/docs/setup/getting-started/index.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. So for now, we will use the released and unextended version.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When launching Che and opening it in your browser, you will first see the “Dashboard”. It enables you to create “Workspaces”, but not projects. Che starts a separate runtime for each workspace. Each can be defined as a single Docker container or a group of containers with a composed recipe. However, the default is one container per workspace.&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The source code and the corresponding runtime (i.e. a JDK or any other arbitrary tools) are encapsulated in that container and can therefore be shared easily. As you can see in the dashboard, there are a variety of pre-defined workspaces to chose from (also called stacks). The “Java” stack serves as a good basis to begin with.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image04-1.png&quot;&gt;&lt;img alt=&quot;image04&quot; class=&quot;alignnone wp-image-27823&quot; height=&quot;171&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image04-1-300x102.png&quot; width=&quot;503&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After we have selected the workspace, Che will launch it for us. Again, technically, a docker container is launched which is pretty similar to  a server-site virtual machine, we will do our development in.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After the workspace has been started, the browser IDE connected to that workspace will be shown (currently empty).&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So let us get an existing modeling project into our fresh workspace.&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To import a project select Workspace -&amp;gt; Import Project. The default is to use a GIT repository, which is what we use in this example. All you need to do is paste the repository url &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipsesource/emfforms-makeithappen-blank&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://github.com/eclipsesource/emfforms-makeithappen-blank&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and click “Import”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image05.png&quot;&gt;&lt;img alt=&quot;image05&quot; class=&quot;alignnone wp-image-27824&quot; height=&quot;367&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image05-300x236.png&quot; width=&quot;467&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now that we have a fully configured template project in our workspace, we can already have a look at the artifacts. As we have no custom editors yet, all files would be handled as plain text. However, we can open them and have a look:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image00.png&quot;&gt;&lt;img alt=&quot;image00&quot; class=&quot;alignnone wp-image-27825&quot; height=&quot;281&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image00-300x181.png&quot; width=&quot;466&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course modifying plain XML is not sufficient, we will have a look at creating custom editors later in this series.&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Another interesting thing to see at this point is that the project has been added to the underlying workspace. The console in the lower area of the Che IDE provides us direct access to it. So by typing  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;vi /projects/makeithappen/org.eclipse.emf.ecp.makeithappen.model/model/task.ecore&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we can look at our Ecore on the console, too:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image09.png&quot;&gt;&lt;img alt=&quot;image09&quot; class=&quot;alignnone wp-image-27826&quot; height=&quot;258&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image09-300x167.png&quot; width=&quot;464&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This means, any command-line based tool can also access our projects artifacts. This is an interesting extension mechanism, that we will use later in our project.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For now, as we have a simple and reproducible way of creating a template project for testing, and we can begin to look at the next requirements for EMF support in Che. It would be obvious to next create a project wizard, a custom modeling project, or a custom editor for Ecore. However, in the next part of this series, we will first enable code generation. This is mainly for risk mitigation. We believe that it is possible with some effort to create our own UI extensions for the Che IDE. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, for the code generation, we want to use the existing code generator already provided by EMF. So is there a way to integrate existing Eclipse features into Che without much effort? Stay tuned for the next part of this series!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;get in contact with us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=EMF+Support+for+Che+%26%238211%3B+Day+1%3A+Run+Che+and+Import+existing+EMF+project&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&amp;amp;t=EMF+Support+for+Che+%26%238211%3B+Day+1%3A+Run+Che+and+Import+existing+EMF+project&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/#respond&quot;&gt;Leave a Comment&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 14 Feb 2017 08:28:55 +0000</pubDate>
</item>
<item>
	<title>Geniutec: Connecting your Angular 2 App to your Java EE Backend</title>
	<guid isPermaLink="false">https://www.genuitec.com/?p=509516</guid>
	<link>https://www.genuitec.com/angular-java/</link>
	<description>&lt;p&gt;Connecting your Angular 2 App to your Java EE BackendYou’ve been developing in Java EE all this time, but you’re tired of using JSF, or perhaps even Struts, and want to move to something more modern for your front end? Angular 2 is a perfect fit, and with the recent release of Angular 2 GA, […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.genuitec.com/angular-java/&quot; rel=&quot;nofollow&quot;&gt;Connecting your Angular 2 App to your Java EE Backend&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.genuitec.com&quot; rel=&quot;nofollow&quot;&gt;Genuitec&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 13 Feb 2017 20:32:20 +0000</pubDate>
</item>
<item>
	<title>Geniutec: Angular Who?</title>
	<guid isPermaLink="false">https://www.genuitec.com/?p=511196</guid>
	<link>https://www.genuitec.com/angular-who/</link>
	<description>&lt;p&gt;Staying true to the Angular dynasty.When you are in a serious relationship, you want your partner to have it all… So when someone more attractive comes along, it’s hard to resist the temptation, isn’t it? That’s true for those who started their love story with Angular (or should we say “AngularJS” or “Angular 1”?), have […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.genuitec.com/angular-who/&quot; rel=&quot;nofollow&quot;&gt;Angular Who?&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.genuitec.com&quot; rel=&quot;nofollow&quot;&gt;Genuitec&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 13 Feb 2017 15:31:14 +0000</pubDate>
</item>
<item>
	<title>Dirk Fauth: Control OSGi DS Component Instances</title>
	<guid isPermaLink="false">http://blog.vogella.com/?p=7522</guid>
	<link>http://blog.vogella.com/2017/02/13/control-osgi-ds-component-instances/</link>
	<description>&lt;p&gt;I recently came across some use cases where a more fine grained control is needed for &lt;em&gt;component instance&lt;/em&gt; creation. I spent some time in investigating how this is done with OSGi Declarative Services in detail. It turned out that it is easier as it seems, mainly because of missing or misleading tutorials. Therefore I decided to write a new blog post about that topic as part of my OSGi Declarative Service blog post series.&lt;/p&gt;
&lt;p&gt;For the start you need to know that by default there is only one &lt;em&gt;component configuration&lt;/em&gt; created and activated in the OSGi runtime at the same time. This means that every bundle is sharing the same &lt;em&gt;component instance&lt;/em&gt;. So you have a singleton instance for every service. &lt;span style=&quot;text-decoration: underline;&quot;&gt;Note:&lt;/span&gt; singleton instance in terms of “one single instance” not “Singleton Pattern”!&lt;/p&gt;
&lt;p&gt;If you think about multi-threading or context dependent services, you may need multiple instances of a service. In an OSGi environment there are basically the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one service instance per runtime&lt;/li&gt;
&lt;li&gt;one service instance per bundle&lt;/li&gt;
&lt;li&gt;one service instance per component/requestor&lt;/li&gt;
&lt;li&gt;one service instance per request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instance creation control can only be done for service components. So ensure to specify the service annotation type element in &lt;code&gt;@Component&lt;/code&gt; if the implementation does not implement an interface.&lt;/p&gt;
&lt;p&gt;To control the instance creation you can use the following mechanisms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DS 1.2 – &lt;code&gt;servicefactory&lt;/code&gt; annotation type element of &lt;code&gt;@Component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DS 1.3 – &lt;code&gt;scope&lt;/code&gt; annotation type element of &lt;code&gt;@Component&lt;/code&gt; to specify the &lt;em&gt;service scope&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;DS 1.2 / DS 1.3 – Create a factory component by using the &lt;code&gt;factory&lt;/code&gt; annotation type element of &lt;code&gt;@Component&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;For some hands on this topic, we first create some bundles to play with.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
I don’t want to explain every step for creating services in detail in this blog post. If you don’t know how to perform the necessary steps, please refer to my &lt;a href=&quot;http://blog.vogella.com/2016/06/21/getting-started-with-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Getting Started with OSGi Declarative Services&lt;/a&gt; blog post.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an API bundle &lt;code&gt;org.fipro.oneshot.api&lt;/code&gt; with a service interface &lt;code&gt;OneShot&lt;/code&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public interface OneShot {

    void shoot(String target);

}&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Create a provider bundle &lt;code&gt;org.fipro.oneshot.provider&lt;/code&gt; with a service implementation &lt;code&gt;Hitman&lt;/code&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component
public class Hitman implements OneShot {

    private static AtomicInteger instanceCounter =
            new AtomicInteger(); 

    private final int instanceNo;

    public Hitman() {
        instanceNo = instanceCounter.incrementAndGet();
    }

    @Override
    public void shoot(String target) {
        System.out.println(&quot;BAM! I am hitman #&quot;
            + instanceNo + &quot;. And I killed &quot; + target);
    }

}&lt;/pre&gt;
&lt;p&gt;This implementation will count the number of instances in a static field and remembers it in a member variable, so we can identify the created instance when the service is called.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Create a command bundle &lt;code&gt;org.fipro.oneshot.command&lt;/code&gt; with a console command to call the service
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=kill&quot;},
    service=KillCommand.class
)
public class KillCommand {

    private OneShot killer;

    @Reference
    void setOneShot(OneShot oneShot) {
        this.killer = oneShot;
    }

    public void kill(String target) {
        killer.shoot(target);
    }
}&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Create a command bundle &lt;code&gt;org.fipro.oneshot.assassinate&lt;/code&gt; with two different console commands that call the service
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=assassinate&quot;},
    service=AssassinateCommand.class
)
public class AssassinateCommand {

    private OneShot hitman;

    @Reference
    void setOneShot(OneShot oneShot) {
        this.hitman = oneShot;
    }

    public void assassinate(String target) {
        hitman.shoot(target);
    }
}&lt;/pre&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=eliminate&quot;},
    service=EliminateCommand.class
)
public class EliminateCommand {

    private ComponentContext context;
    private ServiceReference&amp;lt;OneShot&amp;gt; sr;

    @Activate
    void activate(ComponentContext context) {
        this.context = context;
    }

    @Reference(name=&quot;hitman&quot;)
    void setOneShotReference(ServiceReference&amp;lt;OneShot&amp;gt; sr) {
        this.sr = sr;
    }

    public void eliminate(String target) {
        OneShot hitman =
            (OneShot) this.context.locateService(&quot;hitman&quot;, sr);
        hitman.shoot(target);
    }
}&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;EliminateCommand&lt;/code&gt; uses the &lt;em&gt;Lookup Strategy&lt;/em&gt; to lazily activate the referenced component. In this example probably quite useless, but I wanted to show that this also works fine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Note:&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
I am using the DS 1.2 notation here to make it easier to follow the example in both worlds. In the DS 1.3 only examples later in this blog post, you will see the modified version of the components using DS 1.3 annotations.&lt;/p&gt;
&lt;p&gt;The sources for this blog post can be found on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-pde&quot; target=&quot;_blank&quot;&gt;DS 1.2 PDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-bndtools&quot; target=&quot;_blank&quot;&gt;DS 1.3 Bndtools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;One instance per runtime&lt;/h2&gt;
&lt;p&gt;There is not much to say about this. This is the default behavior if you do not specify something else. There is only one &lt;em&gt;component configuration&lt;/em&gt; created and activated. Therefore only one &lt;em&gt;component instance&lt;/em&gt; is created and shared between all bundles.&lt;/p&gt;
&lt;p&gt;In DS 1.2 a singleton instance can be explicitly configured on the component like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(servicefactory=false)
public class Hitman implements OneShot {&lt;/pre&gt;
&lt;p&gt;In DS 1.3 a singleton instance can be explicitly configured on the component like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(scope=ServiceScope.SINGLETON)
public class Hitman implements OneShot {&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
For &lt;em&gt;Immediate Components&lt;/em&gt; and &lt;em&gt;Factory Components&lt;/em&gt; it is not allowed to use other values for &lt;code&gt;servicefactory&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;If you launch an OSGi application with the necessary bundles (&lt;code&gt;org.apache.felix.scr&lt;/code&gt;, &lt;code&gt;org.apache.felix.gogo.*&lt;/code&gt;, &lt;code&gt;org.fipro.oneshot.*&lt;/code&gt;) and call the commands one after the other, you should get an output similar to this (on a Felix console):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;g! kill Dirk
BAM! I am hitman #1. And I killed Dirk
g! assassinate Dirk
BAM! I am hitman #1. And I killed Dirk
g! eliminate Dirk
BAM! I am hitman #1. And I killed Dirk&lt;/pre&gt;
&lt;p&gt;Every command has a reference to the same &lt;code&gt;Hitman&lt;/code&gt; instance, as can be seen by the instance counter in the output.&lt;/p&gt;
&lt;h2&gt;One instance per bundle&lt;/h2&gt;
&lt;p&gt;There are use cases where it is useful to have one &lt;em&gt;component configuration&lt;/em&gt; created and activated per bundle. For example if the component configuration contains special bundle related configurations.&lt;/p&gt;
&lt;p&gt;In DS 1.2 a bundle scope service can be configured on the component like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(servicefactory=true)
public class Hitman implements OneShot {&lt;/pre&gt;
&lt;p&gt;In DS 1.3 a bundle scope service can be configured on the component like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(scope=ServiceScope.BUNDLE)
public class Hitman implements OneShot {&lt;/pre&gt;
&lt;p&gt;When launching the OSGi application and calling the commands one after the other, you should get an output similar to this (on a Felix console):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;g! kill Dirk
BAM! I am hitman #1. And I killed Dirk
g! assassinate Dirk
BAM! I am hitman #2. And I killed Dirk
g! eliminate Dirk
BAM! I am hitman #2. And I killed Dirk
g! kill Dirk
BAM! I am hitman #1. And I killed Dirk&lt;/pre&gt;
&lt;p&gt;You can see that the &lt;em&gt;kill&lt;/em&gt; command has a reference to the &lt;code&gt;Hitman&lt;/code&gt; instance #1, while the &lt;em&gt;assassinate&lt;/em&gt; and the &lt;em&gt;eliminate&lt;/em&gt; command both have a reference to the &lt;code&gt;Hitman&lt;/code&gt; instance #2, as both reside in the same bundle.&lt;/p&gt;
&lt;h2&gt;One instance per requestor&lt;/h2&gt;
&lt;p&gt;There are some use cases where every consumer needs its own instance of a service. With DS 1.2 you could achieve this by creating a &lt;em&gt;Factory Component&lt;/em&gt;. As this is basically the same as getting a service instance per request, I will explain the &lt;em&gt;Factory Component&lt;/em&gt; in the following chapter. For now I will focus on the DS 1.3 variant to create and use a service instance per requestor.&lt;/p&gt;
&lt;p&gt;In DS 1.3 the PROTOTYPE scope was introduced for this scenario.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(scope=ServiceScope.PROTOTYPE)
public class Hitman implements OneShot {&lt;/pre&gt;
&lt;p&gt;Setting the &lt;em&gt;scope&lt;/em&gt; of the service component to PROTOTYPE does not mean that every consumer gets a distinct service instance automatically. By default the result will be the same as with using the BUNDLE scope. So if you start the application with the updated &lt;code&gt;Hitman&lt;/code&gt; service, you will get the same result as before.&lt;/p&gt;
&lt;p&gt;The reason for this is the &lt;em&gt;reference scope&lt;/em&gt; that was also introduced with DS 1.3. It is configured on the consumer side via &lt;code&gt;@Reference&lt;/code&gt; and specifies how the service reference should be resolved. There are three possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BUNDLE&lt;br /&gt;
All component instances in a bundle will use the same service object. (default)&lt;/li&gt;
&lt;li&gt;PROTOTYPE&lt;br /&gt;
Every component instance in a bundle &lt;strong&gt;may&lt;/strong&gt; use a distinct service object.&lt;/li&gt;
&lt;li&gt;PROTOTYPE_REQUIRED&lt;br /&gt;
Every component instance in a bundle &lt;strong&gt;must&lt;/strong&gt; use a distinct service object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the default of the &lt;em&gt;reference scope&lt;/em&gt; is BUNDLE, we see the same behavior for &lt;em&gt;service scope&lt;/em&gt; PROTOTYPE as we saw for &lt;em&gt;service scope&lt;/em&gt; BUNDLE. That means the consumer components need to be modified to achieve that every one gets its own service instance.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=assassinate&quot;},
    service=AssassinateCommand.class
)
public class AssassinateCommand {

    @Reference(scope=ReferenceScope.PROTOTYPE_REQUIRED)
    private OneShot hitman;

    public void assassinate(String target) {
        hitman.shoot(target);
    }
}&lt;/pre&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=eliminate&quot;},
    service=EliminateCommand.class,
    reference=@Reference(
            name=&quot;hitman&quot;,
            service=OneShot.class,
            scope=ReferenceScope.PROTOTYPE_REQUIRED
    )
)
public class EliminateCommand {

    private ComponentContext context;

    @Activate
    void activate(ComponentContext context) {
        this.context = context;
    }

    public void eliminate(String target) {
        OneShot hitman =
            (OneShot) this.context.locateService(&quot;hitman&quot;);
        hitman.shoot(target);
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The above examples are showing the DS 1.3 version of the command services. You should recognize the usage of the field strategy and the DS 1.3 lookup strategy, which makes the code more compact.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
In the example I have chosen to use the &lt;em&gt;reference scope&lt;/em&gt; PROTOTYPE_REQUIRED. In the given scenario also PROTOTYPE would be sufficient, as the concrete service implementation uses the PROTOTYPE &lt;em&gt;service scope&lt;/em&gt;. But IMHO it is better to specify directly which reference scope to use, instead of having a weak rule.&lt;/p&gt;
&lt;p&gt;When launching the OSGi application and calling the commands one after the other, you should get an output similar to this (on a Felix console):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;g! kill Dirk
BAM! I am hitman #1. And I killed Dirk
g! assassinate Dirk
BAM! I am hitman #2. And I killed Dirk
g! eliminate Dirk
BAM! I am hitman #3. And I killed Dirk
g! kill Dirk
BAM! I am hitman #1. And I killed Dirk&lt;/pre&gt;
&lt;p&gt;You can see that every command gets its own service instance.&lt;/p&gt;
&lt;h2&gt;One instance per request&lt;/h2&gt;
&lt;p&gt;In some use cases it is required to have a distinct service instance per request. This is for example needed for web requests, where it is required that services are created and destroyed in every request, or for multi-threading where services can be executed in parallel (hopefully without side-effects).&lt;/p&gt;
&lt;p&gt;With DS 1.2 a &lt;em&gt;Factory Component&lt;/em&gt; needs to be used. With DS 1.3 again the PROTOTYPE scope helps in solving that requirement. In both cases some OSGi DS API needs to be used to create (and destroy) the service instances.&lt;/p&gt;
&lt;p&gt;First lets have a look at the DS 1.3 approach using PROTOTYPE scoped services and the newly introduced &lt;code&gt;ComponentServiceObjects&lt;/code&gt; interface. The implementation of the &lt;code&gt;ComponentServiceObjects&lt;/code&gt; is a factory that allows to create and destroy service instances on demand. The following example shows the usage. Create it in the &lt;code&gt;org.fipro.oneshot.command&lt;/code&gt; bundle.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=terminate&quot;},
    service=TerminateCommand.class
)
public class TerminateCommand {

    // get a factory for creating prototype scoped service instances
    @Reference(scope=ReferenceScope.PROTOTYPE_REQUIRED)
    private ComponentServiceObjects&amp;lt;OneShot&amp;gt; oneShotFactory;

    public void terminate(String target) {
        // create a new service instance
        OneShot oneShot = oneShotFactory.getService();
        try {
            oneShot.shoot(target);
        } finally {
            // destroy the service instance
            oneShotFactory.ungetService(oneShot);
        }
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
There is no special modification needed in the &lt;em&gt;component configuration&lt;/em&gt; of the provider. It simply needs to be configured with a PROTOTYPE service scope as shown before. The consumer needs to decide what instance should be referenced, the same as every service in the bundle, a new one for every component or a new one for each request.&lt;/p&gt;
&lt;p&gt;Executing the &lt;em&gt;terminate&lt;/em&gt; command multiple times will show that for each call a new &lt;code&gt;Hitman&lt;/code&gt; instance is created. Mixing it with the previous commands will show that the other services keep a fixed instance, while &lt;em&gt;terminate&lt;/em&gt; constantly will create and use a new instance per execution.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;g! kill Dirk
BAM! I am hitman #1. And I killed Dirk
g! terminate Dirk
BAM! I am hitman #2. And I killed Dirk
g! terminate Dirk
BAM! I am hitman #3. And I killed Dirk
g! terminate Dirk
BAM! I am hitman #4. And I killed Dirk
g! kill Dirk
BAM! I am hitman #1. And I killed Dirk&lt;/pre&gt;
&lt;h3&gt;Factory Component&lt;/h3&gt;
&lt;p&gt;With DS 1.2 you need to create a &lt;em&gt;Factory Component&lt;/em&gt; to create a service instance per consumer or per request. The &lt;em&gt;Factory Component&lt;/em&gt; is the third type of components specified by the &lt;a href=&quot;https://www.osgi.org/developer/specifications/&quot; target=&quot;_blank&quot;&gt;OSGi Compendium Specification&lt;/a&gt;, next to the &lt;em&gt;Immediate Component&lt;/em&gt; and the &lt;em&gt;Delayed Component&lt;/em&gt;. It therefore also has its own lifecycle, which can be seen in the following diagram.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;factory_lifecycle&quot; class=&quot;aligncenter wp-image-7537 size-full&quot; height=&quot;436&quot; src=&quot;http://blog.vogella.com/wp-content/uploads/2017/02/factory_lifecycle.png&quot; width=&quot;783&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When the &lt;em&gt;component configuration&lt;/em&gt; is satisfied, a &lt;code&gt;ComponentFactory&lt;/code&gt; is registered. This can be used to activate a new &lt;em&gt;component instance&lt;/em&gt;, which is destroyed once it is disposed or the &lt;em&gt;component configuration&lt;/em&gt; is not satisfied anymore.&lt;/p&gt;
&lt;p&gt;While this looks quite complicated on first sight, it is a lot easier when using DS annotations. You only need to specify the &lt;code&gt;factory&lt;/code&gt; annotation type element on &lt;code&gt;@Component&lt;/code&gt;. The following snippet shows this for a new &lt;code&gt;OneShot&lt;/code&gt; implementation. For the exercise add it to the &lt;code&gt;org.fipro.oneshot.provider&lt;/code&gt; bundle.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(factory=&quot;fipro.oneshot.factory&quot;)
public class Shooter implements OneShot {

    private static AtomicInteger instanceCounter =
        new AtomicInteger(); 

    private final int instanceNo;

    public Shooter() {
        instanceNo = instanceCounter.incrementAndGet();
    }

    @Override
    public void shoot(String target) {
        System.out.println(&quot;PEW PEW! I am shooter #&quot;
            + instanceNo + &quot;. And I hit &quot; + target);
    }

}&lt;/pre&gt;
&lt;p&gt;As explained above, the SCR will register a &lt;code&gt;ComponentFactory&lt;/code&gt; that can be used to create and activate new &lt;em&gt;component configurations&lt;/em&gt; on demand. On the consumer side this means it is not possible to get a &lt;code&gt;Shooter&lt;/code&gt; service instance via &lt;code&gt;@Reference&lt;/code&gt;, as it is not registered as a &lt;em&gt;Delayed Component&lt;/em&gt;. You need to reference a &lt;code&gt;ComponentFactory&lt;/code&gt; instance by specifying the correct &lt;em&gt;target property&lt;/em&gt;. The &lt;em&gt;target property&lt;/em&gt; needs to be specified for the key &lt;code&gt;component.factory&lt;/code&gt; and the value of the &lt;code&gt;factory&lt;/code&gt; annotation type element on the &lt;code&gt;@Component&lt;/code&gt; annotation of the &lt;em&gt;Factory Component&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The following snippet shows the consumer of a &lt;em&gt;Factory Component&lt;/em&gt;. Create it in the &lt;code&gt;org.fipro.oneshot.command&lt;/code&gt; bundle.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=shoot&quot;},
    service=ShootCommand.class
)
public class ShootCommand {

    @Reference(target = &quot;(component.factory=fipro.oneshot.factory)&quot;)
    private ComponentFactory factory;

    public void shoot(String target) {
        // create a new service instance
        ComponentInstance instance = this.factory.newInstance(null);
        OneShot shooter = (OneShot) instance.getInstance();
        try {
            shooter.shoot(target);
        } finally {
            // destroy the service instance
            instance.dispose();
        }
    }
}&lt;/pre&gt;
&lt;p&gt;Comparing the &lt;em&gt;Factory Component&lt;/em&gt; with the PROTOTYPE scoped service, the following differences can be seen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A PROTOTYPE scoped service is a &lt;em&gt;Delayed Component&lt;/em&gt;, while the &lt;em&gt;Factory Component&lt;/em&gt; is a different component type with its own lifecycle.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;Factory Component&lt;/em&gt; can only be consumed by getting the &lt;code&gt;ComponentFactory&lt;/code&gt; injected, while a PROTOTYPE scoped service can be created and consumed in different ways.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;component configuration&lt;/em&gt; needs to be provided when creating the component instance via &lt;code&gt;ComponentFactory&lt;/code&gt;. A PROTOTYPE scoped service can simply use the configuration mechanisms provided in combination with the Configuration Admin.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComponentServiceObjects&lt;/code&gt; is type-safe. The result of &lt;code&gt;ComponentInstance#getInstance()&lt;/code&gt; needs to be cast to the desired type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compared to creating the service instance by using the constructor, the nice thing on using a &lt;em&gt;Factory Component&lt;/em&gt; or a PROTOTPYE scoped service is that the configured service references are resolved by the SCR. You could verify this for example by adding a reference to the &lt;code&gt;StringInverter&lt;/code&gt; service from my previous blog post.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
To create an instance per requestor by using a &lt;em&gt;Factory Component&lt;/em&gt;, you would simply create the instance in the &lt;code&gt;@Activate&lt;/code&gt; method, and dispose it on &lt;code&gt;@Deactivate&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Component Instance cleanup&lt;/h2&gt;
&lt;p&gt;When Peter Kirschner (Twitter: @peterkir) and I prepared our tutorial for the EclipseCon Europe 2016, we noticed a runtime difference between Equinox DS and Felix SCR. In the &lt;em&gt;Console Exercise&lt;/em&gt; we also talked about the lifecycle methods and wanted to show them. So we added the &lt;code&gt;@Activate&lt;/code&gt; and the &lt;code&gt;@Deactivate&lt;/code&gt; method to the StringInverterImpl and the &lt;code&gt;StringInverterCommand&lt;/code&gt;. Running the example on Equinox and executing the console command showed a console output for activating the service and the command. But both never were deactivated. Running the example with Felix SCR the &lt;code&gt;StringInverterCommand&lt;/code&gt; was activated, executed and deactivated right after the execution. We wondered about that different behavior, but were busy with other topics, so we didn’t search further for the cause.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The tutorial sources and slides can be found on &lt;a href=&quot;https://github.com/peterkir/ece2016_prep&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently learned what causes this different behavior and how it can be adjusted.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;Delayed Components&lt;/em&gt; the OSGi Compendium Specification says:&lt;br /&gt;
&lt;em&gt;If the service registered by a component configuration becomes unused because there are no more &lt;/em&gt;&lt;em&gt;bundles using it, then SCR should deactivate that component configuration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Should&lt;/em&gt;&lt;/strong&gt; is a quite weak statement, so it is easy to have a different understanding of this part of the specification. Apache Felix SCR is taking that statement very serious and deactivates and destroys the component once the last consumer that references the component instance is done with it. Equinox DS on the other hand keeps the instance. At least this is the default behavior in those SCR implementations. But both can be configured via system properties to behave differently.&lt;/p&gt;
&lt;p&gt;To configure Equinox DS to dispose component instances that are no longer used (like the Felix SCR default behavior), use the following JVM parameter (see &lt;a href=&quot;https://wiki.eclipse.org/Equinox/RuntimeOptions#System_properties_of_bundle_org.eclipse.equinox.ds&quot; target=&quot;_blank&quot;&gt;Equinox DS Runtime Options&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;-Dequinox.scr.dontDisposeInstances=false&lt;/pre&gt;
&lt;p&gt;To configure Felix SCR to keep component instances and not dispose them once they are no longer used (like the Equinox DS default behavior), use the following Framework property, e.g. by setting it as JVM parameter (see &lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-service-component-runtime.html#configuration&quot; target=&quot;_blank&quot;&gt;Felix SCR Configuration&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;-Dds.delayed.keepInstances=true&lt;/pre&gt;
&lt;p&gt;To get some more insight on this you might also want to look at the &lt;a href=&quot;https://issues.apache.org/jira/browse/FELIX-3039&quot; target=&quot;_blank&quot;&gt;ticket in the Felix bug tracker&lt;/a&gt; where this was discussed.&lt;/p&gt;
&lt;p&gt;To experiment with that you can modify for example &lt;code&gt;Hitman&lt;/code&gt; and &lt;code&gt;KillCommand&lt;/code&gt; and add methods for &lt;code&gt;@Activate&lt;/code&gt; and &lt;code&gt;@Deactivate&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Activate
void activate() {
    System.out.println(
        getClass().getSimpleName() + &quot; activated&quot;);
}

@Deactivate
void deactivate() {
    System.out.println(
        getClass().getSimpleName() + &quot; deactivated&quot;);
}&lt;/pre&gt;
&lt;p&gt;Add the JVM arguments for the runtime you are experimenting with and check the results.&lt;/p&gt;</description>
	<pubDate>Mon, 13 Feb 2017 07:31:54 +0000</pubDate>
</item>
<item>
	<title>Andrey Loskutov: What is new in Eclipse 4.x?</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-5240321281900537312</guid>
	<link>http://javaclipse.blogspot.com/2017/02/what-is-new-in-eclipse-4x.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;h2 style=&quot;text-align: left;&quot;&gt;A look on Eclipse 4.6 from Eclipse 3.8 point of view&lt;/h2&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;i&gt;The good, the bad and the ugly&lt;/i&gt;&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Preface&lt;/h4&gt;This is my personal, condensed, not comprehensive overview of changes in the Eclipse platform happened between last major 3.x release (3.8.0) from September 2012 and now (4.6.3). This overview is written from a user perspective and is for end-users, API changes are not part of the discussion.&lt;br /&gt;&lt;br /&gt;Here are official &quot;New and Noteworthy&quot; links for each release:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://archive.eclipse.org/eclipse/downloads/drops4/R-4.2.1-201209141800/news/&quot;&gt;4.2 N&amp;amp;N (2012)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://archive.eclipse.org/eclipse/downloads/drops4/R-4.3-201306052000/news/&quot;&gt;4.3 N&amp;amp;N (2013)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.4/eclipse_news_4.4.php&quot;&gt;4.4 N&amp;amp;N (2014)&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.5/&quot;&gt;4.5 N&amp;amp;N (2015)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.6/&quot;&gt;4.6 N&amp;amp;N (2016)&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Please note that Eclipse 3.8.0 was released at same time with 4.2.1 but did not contain some features related to the UI programming model change. The difference between 3.8.0 and 4.6.3 are not just 5 years or 5 major  Eclipse releases, it is also a bigger change of the UI programming model from  3.x to 4.x API (aka e4).&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Why to talk about 3.x to 4.x changes today?&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Because Eclipse 3.8.2 was exceptionally well made, stable and reliable release. It required five (!) 4.x releases to reach similar stable state (may be not even same state, but at least some usable state). Also because most plugins till recently were still supporting 3.x stream and because 3.x was good enough to support development of Java 7 based software.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;But as soon as your business switches to Java 8, the time is for Eclipse 4.x, because JDT in 3.8 does not know and does not support Java 8.&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Themes aka L&amp;amp;F&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Eclipse 4.x introduces &quot;themed UI&quot;, where many UI elements can be &quot;styled&quot; with CSS rules. This is a highly controversial change, which from the one side allowed such features like &quot;dark theme&quot; but from the other side ruined UI performance, especially in distributed environments.&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-8eMeFTzSSRI/WJyt-QjVgdI/AAAAAAAAOpY/VL6JB6U57CsN5UW_TJ1uhPO6VfLsGy5PACLcB/s1600/newlook.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;312&quot; src=&quot;https://3.bp.blogspot.com/-8eMeFTzSSRI/WJyt-QjVgdI/AAAAAAAAOpY/VL6JB6U57CsN5UW_TJ1uhPO6VfLsGy5PACLcB/s400/newlook.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;A good example how NOT to design ergonomic IDE theme (4.2. on Windows)&lt;/td&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-dHMVocKG-Ms/WJyzRG3nFpI/AAAAAAAAOps/_Y_JAGM_Up8dHDFN1wIHM33V3sUjef0YQCLcB/s1600/eclipse_4.2_welcome.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;301&quot; src=&quot;https://3.bp.blogspot.com/-dHMVocKG-Ms/WJyzRG3nFpI/AAAAAAAAOps/_Y_JAGM_Up8dHDFN1wIHM33V3sUjef0YQCLcB/s400/eclipse_4.2_welcome.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Same misery (4.2.1) on Linux&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-O7NIBcaS02A/WJyzROmvfII/AAAAAAAAOpw/F-lKjWfv9DQicTP9tVo96epl-0f-UG5mACLcB/s1600/eclipse_3.8_welcome.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;301&quot; src=&quot;https://2.bp.blogspot.com/-O7NIBcaS02A/WJyzROmvfII/AAAAAAAAOpw/F-lKjWfv9DQicTP9tVo96epl-0f-UG5mACLcB/s400/eclipse_3.8_welcome.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;3.8.0 on same system&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Either way (with or without themes), Eclipse 4.x doesn't look like Eclipse 3.8. Initial 4.2.1 in the default theme was simply ugly, on every operating system. With the time, 4.x stream got some polishing and starting with 4.6 reached the state of 3.8, more or less. From the performance point of view, CSS themes add a considerable computational overhead for complex UI's (plus extra layer of code which can be broken) and can significantly slow down Eclipse (to completely unusable state) in specific environments, like remote usage via vncviewer, rdesktop and Co.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-wDnjDv6vMoU/WJ3szav8BgI/AAAAAAAAOr4/WzKnh5h-PA4-e0O-FyRmMWb_C5ELAJ7ggCLcB/s1600/Screenshot%2B%252816%2529.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://2.bp.blogspot.com/-wDnjDv6vMoU/WJ3szav8BgI/AAAAAAAAOr4/WzKnh5h-PA4-e0O-FyRmMWb_C5ELAJ7ggCLcB/s400/Screenshot%2B%252816%2529.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Dark theme on Windows 10&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;i&gt;Recommendation&lt;/i&gt;: don't use CSS themes to have less bugs, slicker and faster UI experience.&lt;/div&gt;&lt;/blockquote&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-ttEBsHFZGwQ/WJy2vnu0KYI/AAAAAAAAOqA/QT2fCQi2fGcnqvGC7RElBfINjoLYsHNjACLcB/s1600/no_themes_462.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;290&quot; src=&quot;https://4.bp.blogspot.com/-ttEBsHFZGwQ/WJy2vnu0KYI/AAAAAAAAOqA/QT2fCQi2fGcnqvGC7RElBfINjoLYsHNjACLcB/s400/no_themes_462.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;4.6.3 with themes disabled, Windows 10&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;High-DPI monitors support&lt;/h4&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;SWT now automatically scales images on high-DPI monitors on Windows and  Linux, similar to the Mac's Retina support on OS X.        In the absence of high-resolution images, SWT will auto-scale the  available images to ensure that SWT-based applications like Eclipse       are scaled proportionately to the resolution of the monitor.&lt;/span&gt;&lt;/h4&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Sometimes this automatic scale doesn't work or looks not nice - in this cases there are &lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.6/platform.php#swt-autoscale-tweaks&quot;&gt;ways to tweak the default behavior&lt;/a&gt;. &lt;/span&gt; &lt;/h4&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;GTK3 support &lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;As if it would be not enough UI nonsense introduced with new themes, &lt;a href=&quot;http://javaclipse.blogspot.de/2015/06/mars-on-linux.html&quot;&gt;Eclipse 4.5+ uses GTK3&lt;/a&gt; instead of GTK2 on Linux by default. Slick, useful, clean widgets from GTK2 are replaced by a pixel eating monsters from GTK3. The only solution for that is to use GTK3 themes with more &quot;human&quot; button sizes, but good GTK3 themes &lt;a href=&quot;https://github.com/jpfleury/clearlooks-phenix&quot;&gt;are very rare&lt;/a&gt;. Unfortunately, GTK3 is here to stay and GTK2 will be obsoleted sooner or later.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;One can still switch to GTK2 however: either export &lt;b&gt;SWT_GTK3=0&lt;/b&gt; in the shell before starting Eclipse or add this &lt;b&gt;two &lt;/b&gt;lines to your eclipse.ini:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;--launcher.GTK_version&lt;br /&gt;2&lt;/pre&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Modeled UI&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Eclipse 4.x UI layout is more flexible and removes some restrictions 3.x Eclipse had. Now one can place editors and views in the same stack and move editors outside of the main window. FWIW, I personally never used this flexibility, but there are always corner cases where this could be useful.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-aZJS3XwPhC4/WJy5MvkRGxI/AAAAAAAAOqY/wuEgS5qlzYAYvF69VDA9uIdM5Exz2ms0wCLcB/s1600/e4_flexibility.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;313&quot; src=&quot;https://4.bp.blogspot.com/-aZJS3XwPhC4/WJy5MvkRGxI/AAAAAAAAOqY/wuEgS5qlzYAYvF69VDA9uIdM5Exz2ms0wCLcB/s400/e4_flexibility.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Flexible UI&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Unfortunately, with flexibility comes also complexity and bugs. So migration from 3.x workspace to 4.x with opened editors results in editors without close buttons and close menus (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=509712&quot;&gt;bug 509712&lt;/a&gt;). First time user who don't know this are surprised and are helpless to find out how to close the editor in the new world. Another bug (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=511798&quot;&gt;511798&lt;/a&gt;) is also not nice: if you have two editors in the split screen mode (like in example above), you will see an ugly white bar over them. &lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Quick access &amp;lt;Ctrl+3&amp;gt;&lt;/h4&gt;One shortcut every Eclipse user should learn is &amp;lt;Ctrl+3&amp;gt;, or &quot;Quick Access&quot;. You can open views, start commands etc, very handy. To make it more prominent for new users, a permanent text box was added in the top right corner in Eclipse 4.x. Unfortunately, this changed the location and size of the resulting dialog, which a step backwards compared to 3.x. Instead to open in front of user and have appropriate size and location, it opens somewhere far right, with a small size where nothing really fits into.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-i1FRd-CF-OM/WJ22XG5pL6I/AAAAAAAAOq0/Nd-1tSMoafE0PlLUzAjqDAQDzUSuh1Z_wCLcB/s1600/quick_assist_default.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://3.bp.blogspot.com/-i1FRd-CF-OM/WJ22XG5pL6I/AAAAAAAAOq0/Nd-1tSMoafE0PlLUzAjqDAQDzUSuh1Z_wCLcB/s400/quick_assist_default.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Crippled Quick Assist in 4.x&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Fortunately, there is a workaround which allows to restore 3.x L&amp;amp;F. One has to right click on the thin text box border and if one has luck, one will be able to click on the &quot;Hide&quot; menu:&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-pxj01g34j1g/WJ22XLwI4NI/AAAAAAAAOqw/fpnfYvUm12AFHa7cqYC-oWOdNATDfSA3wCEw/s1600/hide_quick_assist.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;63&quot; src=&quot;https://2.bp.blogspot.com/-pxj01g34j1g/WJ22XLwI4NI/AAAAAAAAOqw/fpnfYvUm12AFHa7cqYC-oWOdNATDfSA3wCEw/s400/hide_quick_assist.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Hide that ugly box!&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;and voila, the old good quick assist appears at the expected location and with size where everything fits: &lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-LP_8_4MD0kU/WJ22XG7aR5I/AAAAAAAAOq4/r0R_gY6fUzAX2lcMMYiszEbmlLURDrqagCEw/s1600/quick_assist_like3x.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://4.bp.blogspot.com/-LP_8_4MD0kU/WJ22XG7aR5I/AAAAAAAAOq4/r0R_gY6fUzAX2lcMMYiszEbmlLURDrqagCEw/s400/quick_assist_like3x.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Welcome back, quick assist with 3.x L&amp;amp;F!&lt;/td&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Open resource &amp;lt;Ctrl+Shift+R&amp;gt;&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Open Resource dialog got some love. It can now filter duplicated resources, show or hide derived resources, show only files from specific working set. Additionally, files can be either opened with a default editor or user can choose which editor should be used to open them.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-RRIfo26OKCI/WJ28UhTB37I/AAAAAAAAOrQ/RswI_2H4qBMJQqJ1fiMqQBIOxdxoyxT1ACLcB/s1600/open_resource2.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;175&quot; src=&quot;https://4.bp.blogspot.com/-RRIfo26OKCI/WJ28UhTB37I/AAAAAAAAOrQ/RswI_2H4qBMJQqJ1fiMqQBIOxdxoyxT1ACLcB/s400/open_resource2.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-E4OMdmgxRmg/WJ28UhKec_I/AAAAAAAAOrM/vnIJf-OcT-c-9pfh40frKwUOgcgwyWP3QCLcB/s1600/open_resource.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;348&quot; src=&quot;https://4.bp.blogspot.com/-E4OMdmgxRmg/WJ28UhKec_I/AAAAAAAAOrM/vnIJf-OcT-c-9pfh40frKwUOgcgwyWP3QCLcB/s400/open_resource.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Split editor&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Sometimes one want to see code from two functions at same time - in a large file this is of course not possible, therefore there is now a new &lt;b&gt;Window &amp;gt; Editor &amp;gt; Toggle Split Editor&lt;/b&gt; menu:&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-_F3pbtCm3YI/WJ3waU2iP5I/AAAAAAAAOsI/0DkcmUC8ouIDuz8zX9m9D-2xigVIL8JwQCLcB/s1600/spliteditor.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;218&quot; src=&quot;https://4.bp.blogspot.com/-_F3pbtCm3YI/WJ3waU2iP5I/AAAAAAAAOsI/0DkcmUC8ouIDuz8zX9m9D-2xigVIL8JwQCLcB/s400/spliteditor.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Split editor vertical&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Word wrap &amp;lt;Alt+Shift+Y&amp;gt;&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;http://javaclipse.blogspot.de/2015/11/can-you-believe-it.html&quot;&gt;Believe or not&lt;/a&gt;, it took only 12 years for Eclipse to implement soft wrapping in text editors. But better later then never, we have now a button on the toolbar and a shortcut &amp;lt;Alt+Shift+Y&amp;gt; to toggle word wrapping in the current editor: &lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;transparent&quot; height=&quot;297&quot; src=&quot;https://4.bp.blogspot.com/-PMqsqnalcZg/VkJIziv10dI/AAAAAAAACYU/I2ZISO0aZP4/s400/word_wrap.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Word wrap!&lt;/td&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Console improvements &lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Word wrap button is also added to all I/O consoles, where it enables soft word wrapping for long output. Beside this, I/O consoles got &quot;automatic scroll lock&quot; mode, which is automatically enabled by scrolling up in the Console view using keys, mouse wheel, or scroll bar. When you scroll down to the end of the console, the scroll lock is automatically released again. &lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-rpF6izCzEL0/WKBDOHMbPeI/AAAAAAAAOuY/-TsrqyizyL4TJKEfwCrT2X3lDJYEmaX6wCLcB/s1600/console_improvements.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;147&quot; src=&quot;https://4.bp.blogspot.com/-rpF6izCzEL0/WKBDOHMbPeI/AAAAAAAAOuY/-TsrqyizyL4TJKEfwCrT2X3lDJYEmaX6wCLcB/s400/console_improvements.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Console with word wrap and scroll lock&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Root of all evil&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;strike&gt;Don't drink and drive&lt;/strike&gt; Don't run Eclipse as root! This happens seldom, but if it happens, it will you make busy for the next few hours. Finally, Eclipse helps us and allows prevent to start it with root rights via new command line option: &lt;b&gt;-protect root&lt;/b&gt;.&lt;b&gt; &lt;/b&gt;This option will make sure Eclipse don't start if you have root rights on Linux.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Show in system explorer&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Right click on any file or folder in Eclipse and say &lt;b&gt;Show In &amp;gt; System Explorer&lt;/b&gt;. This will open system default &quot;Explorer&quot; and highlight the selected file or folder. In case the system default &quot;Explorer&quot; doesn't open (Linux), the command line to launch it can be configured under &lt;b&gt;Window &amp;gt; Preferences &amp;gt; General &amp;gt; Workspace &amp;gt; &lt;/b&gt;Command for launching system explorer.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-WxeOC7hh-NY/WKApd3B2W9I/AAAAAAAAOtM/5BkmPicZVUMM9q6nMuypiwp9q6P4EGw0QCLcB/s1600/show_in_system_explorer.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;286&quot; src=&quot;https://3.bp.blogspot.com/-WxeOC7hh-NY/WKApd3B2W9I/AAAAAAAAOtM/5BkmPicZVUMM9q6nMuypiwp9q6P4EGw0QCLcB/s400/show_in_system_explorer.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Show In System Explorer&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Improved Open With ... Other dialog&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The &lt;b&gt;Open With &amp;gt; Other...&lt;/b&gt; dialog now has: &lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-ebSLQgDAIeA/WKAt_whlhOI/AAAAAAAAOtY/roLz81moLaw5zBQ7dx9TNLUWNrZ-OxiiwCLcB/s1600/open_with_editor.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://4.bp.blogspot.com/-ebSLQgDAIeA/WKAt_whlhOI/AAAAAAAAOtY/roLz81moLaw5zBQ7dx9TNLUWNrZ-OxiiwCLcB/s400/open_with_editor.png&quot; title=&quot;&quot; width=&quot;291&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Open With... extended&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;a filter field&lt;/li&gt;&lt;li&gt;remembers last used choice &lt;/li&gt;&lt;li&gt;options to remember the selected editor as default for the selected file name or type.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Tabs &quot;Close...&quot; menus&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The context menu of editor and view tabs now offer &lt;b&gt;Close Tabs to the Left&lt;/b&gt; and &lt;b&gt;Close Tabs to the Right&lt;/b&gt; menu:&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-EtwCCjw9TKo/WKAv85yKIqI/AAAAAAAAOtk/dLbTNiSbdWoKnZthQ2eH55qMHhkZieigACLcB/s1600/close_tabs_menu.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;98&quot; src=&quot;https://2.bp.blogspot.com/-EtwCCjw9TKo/WKAv85yKIqI/AAAAAAAAOtk/dLbTNiSbdWoKnZthQ2eH55qMHhkZieigACLcB/s400/close_tabs_menu.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Tabs Menu&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;MRU or automatic editor shuffling&lt;/h4&gt;In classic 2.x versions of Eclipse the editors tab placement strategy       was simple: they were shown in exact the order they were opened by the user. This is how all tools in the universe work. Then, in Eclipse 3.0 this simple universal standard was changed to show the most recently used tabs (MRU) first, and &lt;b&gt;automatically&lt;/b&gt; reorder tabs to always show few last used if there is not enough place to show all. This change was highly controversial, see lengthy discussions in &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=68684&quot;&gt;bug 68684&lt;/a&gt;. Finally, via &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=461736&quot;&gt;bug 461736&lt;/a&gt; the       tab visibility strategy has has been turned into a separate preference, so everyone can decide if MRU should be turned on or off.&lt;br /&gt;&lt;br /&gt;The new preference can be found under       &lt;b&gt;Window &amp;gt; Preferences &amp;gt; General &amp;gt; Appearance &amp;gt; Visible Tabs on overflow &amp;gt; Show most recently used tabs:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-ticV5gLh7kI/WKAzOMEuUuI/AAAAAAAAOtw/EpShsw1GyisYSK5o4f9YjZm3jcM_tAPvwCLcB/s1600/mru_off.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;327&quot; src=&quot;https://3.bp.blogspot.com/-ticV5gLh7kI/WKAzOMEuUuI/AAAAAAAAOtw/EpShsw1GyisYSK5o4f9YjZm3jcM_tAPvwCLcB/s400/mru_off.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;MRU off!&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;UI responsiveness monitoring&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;This feature is might be uninteresting for the end user, but it greatly helps IDE developers to recognize misbehaved code which causes UI freezes. UI responsiveness monitoring can be turned on via &lt;b&gt;Window &amp;gt; Preferences &amp;gt; General &amp;gt; UI Responsiveness Monitoring&lt;/b&gt;.&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-7oK-R7UW9ec/WKA-WPxmMgI/AAAAAAAAOuI/BDJD2I-plWgcqcg0gB5EVdY2fp8VZWm7ACLcB/s1600/ui_responsiveness_settings.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;357&quot; src=&quot;https://1.bp.blogspot.com/-7oK-R7UW9ec/WKA-WPxmMgI/AAAAAAAAOuI/BDJD2I-plWgcqcg0gB5EVdY2fp8VZWm7ACLcB/s400/ui_responsiveness_settings.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;UI responsiveness preferences&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Please enable monitoring and please report UI freezes (they are reported to the Eclipse error log) to &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Platform&quot;&gt;bugzilla&lt;/a&gt;.&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Copy/paste for files improved&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;lt;Ctrl+C &amp;gt; / &amp;lt;Ctrl+V&amp;gt; of a files in same folder in explorer views  to create a copy automatically proposes now  just the old name followed by the digit 2 (or 3, etc., if that name is already taken). This is really handy if one wants create few file duplicates in same folder.&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Shortcut for Skip All Breakpoints          &lt;b&gt; &lt;/b&gt;&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;A very handy &lt;b&gt;Ctrl+Alt+B&lt;/b&gt; has been added as the shortcut for &lt;b&gt;Skip All Breakpoints&lt;/b&gt;:&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-dZqm0E7YqFo/WKBMPCn0bII/AAAAAAAAOuo/_3UAcnTRSRAfD4pndioZ2omL37XhZCauACLcB/s1600/skip-all-breakpoints.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;82&quot; src=&quot;https://2.bp.blogspot.com/-dZqm0E7YqFo/WKBMPCn0bII/AAAAAAAAOuo/_3UAcnTRSRAfD4pndioZ2omL37XhZCauACLcB/s200/skip-all-breakpoints.png&quot; title=&quot;&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Zoom font in editors &amp;lt;Ctrl++&amp;gt; and &amp;lt;Ctrl+-&amp;gt;&lt;/h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;In text editors, you can now use Zoom In &amp;lt;Ctrl++&amp;gt; or &amp;lt;Ctrl+=&amp;gt; and Zoom Out &amp;lt;Ctrl+-&amp;gt; commands     to increase and decrease the font size.&lt;/span&gt; Like a change in the &lt;b&gt;Window &amp;gt; General &amp;gt; Appearance &amp;gt; Colors and Fonts&lt;/b&gt; preference page, the commands persistently       change the font size in all editors of the same type. If the editor type's font is configured to use a default font,       then that default font will be zoomed.&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Automatic save of dirty editors&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Auto-save of dirty editors is now available in Eclipse. The autosave option is &lt;b&gt;disabled by default&lt;/b&gt;.       A new autosave preference page (&lt;b&gt;Window &amp;gt; Preferences &amp;gt; General &amp;gt; Editors &amp;gt; Autosave&lt;/b&gt;)  is available  and allows to enable/disable the autosave and change the  interval of autosave.       The countdown is reset on keyboard activity, mouse click, or when a  popup is displayed (e.g. content assist, preference page, ...).&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-ZUmCpapyKME/WKBRjN_mg_I/AAAAAAAAOu4/fwkxD9X3Nsg0hlvaTbkdxnbyq6txKUHwwCLcB/s1600/autosave_editors.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;318&quot; src=&quot;https://3.bp.blogspot.com/-ZUmCpapyKME/WKBRjN_mg_I/AAAAAAAAOu4/fwkxD9X3Nsg0hlvaTbkdxnbyq6txKUHwwCLcB/s400/autosave_editors.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Autosave preferences&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Workspace selection dialog&lt;/h4&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The workspace selection dialog now allows you to start a previously selected        workspace directly via a link. The path to        the workspace is shortened. The full path is available if you hover over the link.              You can remove existing entries via the context menu.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-TWFf2NSsBeg/WKDGsjBpytI/AAAAAAAAOvI/Lh2xGwcu57wBj2n4QfvC25ijXO9ufqGXACLcB/s1600/workspace_selection.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; title=&quot;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;213&quot; src=&quot;https://1.bp.blogspot.com/-TWFf2NSsBeg/WKDGsjBpytI/AAAAAAAAOvI/Lh2xGwcu57wBj2n4QfvC25ijXO9ufqGXACLcB/s400/workspace_selection.png&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Workspace selection dialog&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Screen space tweaks&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Main toolbar can be hidden (&lt;b&gt;Window &amp;gt; Appearance &amp;gt; Hide Toolbar&lt;/b&gt;), and Eclipse window can be put in the &quot;Full Screen&quot; mode without title bar (&lt;b&gt;Window &amp;gt; Appearance &amp;gt; Toggle Full Screen&lt;/b&gt;). In 4.7 there will be another tweak: &lt;b&gt;Window &amp;gt; Appearance &amp;gt; Hide Status Bar&lt;/b&gt;. Guess what it will do :-)&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Print button is hidden&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Yep,  the global toolbar does not show &quot;Print&quot; button by default, to save  space. It turned out, no one actually uses this function, so why should  it be on the main toolbar?&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Default text editor for unknown files&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Since ever Eclipse tried to open a system editor for files which did not have a dedicated editor in Eclipse. In 4.x there is a possibility to stop this and to chose to always use default text editor from Eclipse instead.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;On the &lt;b&gt;Window &amp;gt; Preferences &amp;gt; General &amp;gt; Editors &amp;gt; File Association&lt;/b&gt; page, you can now define an editor selection       strategy for unassociated file types. Three strategies are proposed out-of-the-box:       &lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;System Editor; if none: Text Editor&lt;/b&gt; (default) will open the system editor associated with the file, if available. If no system editor           is associated with the given file, fall back to the Eclipse Text Editor&lt;/li&gt;&lt;li&gt;&lt;b&gt;Text Editor&lt;/b&gt; will always open Eclipse's Text Editor on unassociated file types&lt;/li&gt;&lt;li&gt;&lt;b&gt;Ask via pop-up&lt;/b&gt; will open the same dialog as using &lt;b&gt;Open With &amp;gt; Other...&lt;/b&gt; on a file and let you choose which           editor to use (inside or outside the IDE)&lt;/li&gt;&lt;/ul&gt;Keep in mind that in any case, it's possible to assign an editor  for an unassociated file type either via this same preference page,       or via the &lt;b&gt;Open With &amp;gt; Other...&lt;/b&gt; context-menu on the file&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Eclipse sources are in Git&lt;/h4&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Along with 4.x transition, all Eclipse sources were moved to Git (from CVS). This opened a really nice path for contributions. If you are interested in Eclipse hacking, or just want to fix this nasty XYZ bug - please consider to contribute back to the community: &lt;a href=&quot;https://wiki.eclipse.org/Platform_UI/How_to_Contribute&quot;&gt;https://wiki.eclipse.org/Platform_UI/How_to_Contribute&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 12 Feb 2017 23:17:58 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Open Source Project Announcements, February 10/2017</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4410</guid>
	<link>https://waynebeaton.wordpress.com/2017/02/10/eclipse-foundation-open-source-project-announcements-february-102017/</link>
	<description>&lt;h2&gt;Intellectual Property Policy Changes Implementation&lt;/h2&gt;
&lt;p&gt;You’ve likely heard about the introduction of a new type of intellectual property (IP) due diligence for third party content. The short version is that our &lt;i&gt;Type A&lt;/i&gt; Due Diligence involves a license certification only and our &lt;i&gt;Type B&lt;/i&gt; Due Diligence provides our traditional license certification, provenance check, and code scan for various sorts of anomalies. I’ve been blogging about it: take a look at my blog’s &lt;a href=&quot;https://waynebeaton.wordpress.com/category/intellectual-property/&quot;&gt;Intellectual Property category&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;Vulnerability Reporting Process Tweaks&lt;/h2&gt;
&lt;p&gt;I’ve been working on &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=510142&quot;&gt;some updates&lt;/a&gt; to our policy and procedures regarding security issues and vulnerability reporting.&lt;/p&gt;
&lt;p&gt;Committers should familiarize themselves with the &lt;a href=&quot;https://www.eclipse.org/security/&quot;&gt;Eclipse Security Policy&lt;/a&gt;. The policy describes a means for tracking discussion on sensitive issues without immediately disclosing them to the public via a “committer only” designation in Bugzilla. Unfortunately, GitHub Issues does not have a means of privately discussing issues between committers, so we’ve set up a solution that uses the Eclipse Bugzilla instance. The Eclipse Webmaster created a generic bucket for capturing vulnerability reports and we are putting the pieces together to ensure that issue reports get directed correctly (e.g. assign them to the right project lead).&lt;/p&gt;
&lt;p&gt;We’ve included a handy link on the security page to make it easy to create bug reports in the right state (i.e. with the &lt;i&gt;committers only&lt;/i&gt; flag turned on). I encourage project teams (especially those working on runtime technology) to consider including a project-specific link for reporting vulnerabilities.&lt;/p&gt;
&lt;p&gt;Note that it is our policy that all vulnerabilities eventually get disclosed, so issue privacy should be considered as short term state to give a project team an opportunity to get ahead of a vulnerability.&lt;/p&gt;
&lt;h2&gt;Google Summer of Code&lt;/h2&gt;
&lt;p&gt;From the &lt;a href=&quot;http://write.flossmanuals.net/gsocstudentguide/what-is-google-summer-of-code/&quot;&gt;Google Summer of Code Student Manual&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;Google Summer of Code (GSoC) is a global program that matches students up with open source, free software and technology-related organizations to write code and get paid to do it! The organizations provide mentors who act as guides through the entire process, from learning about the community to contributing code. The idea is to get students involved in and familiar with the open source community and help them to put their summer break to good use.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Project teams that intend to participate in the Google Summer of Code should visit our &lt;a href=&quot;https://wiki.eclipse.org/Google_Summer_of_Code&quot;&gt;Information Page&lt;/a&gt;, sign up for the &lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/soc-dev&quot;&gt;soc-dev mailing list&lt;/a&gt;, and add student project ideas to the &lt;a href=&quot;https://wiki.eclipse.org/Google_Summer_of_Code_2017_Ideas&quot;&gt;Ideas Page&lt;/a&gt;. You may also consider marking some of your bugs as &lt;i&gt;helpwanted&lt;/i&gt; or &lt;i&gt;bugday&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Note that we’re still in the mentoring organization application stage; we’ll let you know when it’s time to sigh up as a mentor or student.&lt;/p&gt;
&lt;h2&gt;Project Announcements&lt;/h2&gt;
&lt;p&gt;There are some reviews concluding on February 15, 2017:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/rt.gemini.blueprint/reviews/2.0.0-release-review&quot;&gt;Gemini Blueprint 2.0.0 Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/rt.gemini.web/reviews/3.0.0-release-review&quot;&gt;Gemini Web 3.0.0 Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/rt.vertx/reviews/3.4.0-release-review&quot;&gt;Vert.x 3.4.0 Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/rt.virgo/reviews/3.7.0-release-review&quot;&gt;Virgo 3.7.0 Release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have several proposals open for community review:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-gemoc-studio&quot;&gt;Eclipse GEMOC Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-keti&quot;&gt;Eclipse Keti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/n4js&quot;&gt;Eclipse N4JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please add your comments either directly on the proposal or in the &lt;a href=&quot;https://www.eclipse.org/forums/eclipse.proposals&quot;&gt;Proposals forum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We run reviews ending on the first and third Wednesday of each month. Our next scheduled review dates are March 1, 2017 and March 15, 2017.&lt;/p&gt;
&lt;p&gt;For more information about releases and reviews, please see the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release&quot;&gt;Eclipse Project Handbook&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Eclipse Foundation Projects Team at Eclipse Converge and Devoxx US&lt;/h2&gt;
&lt;p&gt;The Eclipse Foundation Projects Team will be at &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt; and &lt;a href=&quot;http://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt; in March. We’ll be there to answer your questions, and help you work through any process-related issues. We’ll be hanging out the Eclipse Foundation’s Booth.  Join us there!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devoxx.us&quot;&gt;&lt;img alt=&quot;devoxx_black_transparent400&quot; class=&quot;alignnone size-full wp-image-4416&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/02/devoxx_black_transparent400.png?w=640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4410/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4410/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4410&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 10 Feb 2017 20:47:26 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: e(fx)clipse support for Java9</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=4967</guid>
	<link>https://tomsondev.bestsolution.at/2017/02/10/efxclipse-support-for-java9/</link>
	<description>&lt;p&gt;Approximately a month ago we started to the work to run e(fx)clipse applications on Java9. We had to clean up our codebase a bit because sometimes we called into none-public API (eg impl_*) who has been made private or released as public API, used all sorts of reflection hacks (eg to get Tab-DnD working) who break on Java9 for obvious reasons.&lt;/p&gt;
&lt;p&gt;It’s been quite some work but finally things are working! &lt;/p&gt;
&lt;p&gt;The screenshot shows an sample e4 application I’ve written to get myself used to the new module-system API:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tomsondev.bestsolution.at/2017/02/10/efxclipse-support-for-java9/screen-j9/&quot; rel=&quot;attachment wp-att-4969&quot;&gt;&lt;img alt=&quot;screen-j9&quot; class=&quot;alignnone size-full wp-image-4969&quot; height=&quot;400&quot; src=&quot;https://tomsondev.files.wordpress.com/2017/02/screen-j9.png?w=640&amp;amp;h=400&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Supporting Java9 is a critical thing for the future of the e(fx)clipse platform but as important is that we won’t force you to use Java9 with JPMS but keep e(fx)clipse compatible to Java8 and Java9 for the 3.x and maybe 4.x stream.&lt;/p&gt;
&lt;p&gt;To help us supporting both platforms we encapsulated API calls who are different in Java8 and Java9 into a small utility class you can make use of in your JavaFX applications just by adding a (maven) dependency on &lt;/p&gt;
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot;&gt;...
  &amp;lt;repositories&amp;gt;
    &amp;lt;repository&amp;gt;
      &amp;lt;name&amp;gt;BestSolution e(fx)clipse releases&amp;lt;/name&amp;gt;
      &amp;lt;id&amp;gt;efxclipse-releases&amp;lt;/id&amp;gt;
      &amp;lt;url&amp;gt;http://maven.bestsolution.at/efxclipse-releases/&amp;lt;/url&amp;gt;
     &amp;lt;/repository&amp;gt;
     &amp;lt;repository&amp;gt;
       &amp;lt;name&amp;gt;BestSolution e(fx)clipse snapshots&amp;lt;/name&amp;gt;
       &amp;lt;id&amp;gt;efxclipse-snapshots&amp;lt;/id&amp;gt;
       &amp;lt;url&amp;gt;http://maven.bestsolution.at/efxclipse-snapshots/&amp;lt;/url&amp;gt;
       &amp;lt;snapshots&amp;gt;
         &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;/snapshots&amp;gt;
      &amp;lt;/repository&amp;gt;
  &amp;lt;/repositories&amp;gt;
  &amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;at.bestsolution.efxclipse.rt&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;org.eclipse.fx.ui.controls&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    ...
  &amp;lt;dependencies&amp;gt;
...
&lt;/pre&gt;
&lt;p&gt;in your Java code add a static import for &lt;code&gt;org.eclipse.fx.ui.controls.JavaFXCompatUtil&lt;/code&gt; and if you eg want get all currently available windows just do it like this code snippet&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;import static org.eclipse.fx.ui.controls.JavaFXCompatUtil.*

// ...

JavaFXCompatUtil.getWindows();
&lt;/pre&gt;
&lt;p&gt;Currently we use Reflection to switch between Java9 and Java8 APIs but in future multi-version jars might also be a solution. &lt;/p&gt;
&lt;p&gt;To sum up I’m happy things are working so smooth on Java9, the only sad thing is that &lt;a href=&quot;https://tomsondev.bestsolution.at/2016/11/25/improving-minmax-performance-in-e4-on-javafx-applications/&quot;&gt;our performance hack to turn off the JavaFX-CSS-Engine&lt;/a&gt; under certain conditions does not work anymore in Java9 and we won’t be able to implement a replacement.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/tomsondev.wordpress.com/4967/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tomsondev.wordpress.com/4967/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=tomsondev.bestsolution.at&amp;amp;blog=7995503&amp;amp;post=4967&amp;amp;subd=tomsondev&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 10 Feb 2017 00:41:10 +0000</pubDate>
</item>
<item>
	<title>Alexander Nyssen: GEF4 + 1 = GEF 5</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7387747921278902619.post-851959234920450090</guid>
	<link>http://nyssen.blogspot.com/2017/02/gef4-1-gef-5.html</link>
	<description>It's been roughly eight months since we graduated GEF4 1.0.0 as part of the &lt;a href=&quot;https://projects.eclipse.org/projects/tools.gef/releases/4.0.0-neon&quot; target=&quot;_blank&quot;&gt;GEF 4.0.0 (Neon)&lt;/a&gt; release, and we have since not kept still. As its always hard to get a debut right, we first concentrated on some bug fixes and shipped GEF4 1.1.0 as part of the &lt;a href=&quot;https://projects.eclipse.org/projects/tools.gef/releases/4.1.0-neon.1&quot; target=&quot;_blank&quot;&gt;GEF 4.1.0 (Neon.1)&lt;/a&gt; bugfix release in September. Since then, we have concentrated on the Oxygen stream.&lt;br /&gt;&lt;br /&gt;In order to emphasize that through its graduation, the GEF4 new code base has now officially superseded the former production components, we thought it important to adopt our wording accordingly. That is, we now refer to the original code base as GEF-Legacy, while we use GEF to refer to the new code base alone.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/gef/images/GEF_generations.jpeg&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;256&quot; src=&quot;https://www.eclipse.org/gef/images/GEF_generations.jpeg&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Helvetica; font-size: 12px; line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;We reflected this when migrating our org.eclipse.gef and org.eclipse.gef4 Git repositories to respective &lt;a href=&quot;https://github.com/eclipse/gef-legacy&quot; target=&quot;_blank&quot;&gt;GEF-Legacy&lt;/a&gt; and &lt;a href=&quot;https://github.com/eclipse/gef&quot; target=&quot;_blank&quot;&gt;GEF&lt;/a&gt; GitHub repositories, and we further adopted the namespace of all GEF(4) bundles from &lt;i&gt;org.eclipse.gef4.*&lt;/i&gt; to &lt;i&gt;org.eclipse.gef.*&lt;/i&gt; (the namespace of the former production components was preserved, and as there is no overlap, they can still be installed in parallel). The Oxygen release is accordingly referred to as the &lt;a href=&quot;https://projects.eclipse.org/projects/tools.gef/releases/5.0.0-oxygen&quot; target=&quot;_blank&quot;&gt;GEF 5.0.0 (Oxygen)&lt;/a&gt; release: GEF4 + 1 = GEF 5.&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;While the renaming alone would already have enforced a major release because of semantic versioning constraints, we also had the strong intention to do more than mere 'cosmetics'. Let me point out just two things that have concerned us so far on our way to Oxygen.&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Merger of MVC and MVC.FX&lt;/h3&gt;&lt;div&gt;When we started working on the GEF model-view-controller framework (MVC) component, we took much care of separating generic, rendering-toolkit independent concepts (MVC) from JavaFX-specific aspects (MVC.FX). The motivation behind was to enable a potential reuse of generic concepts also for other rendering toolkits than JavaFX. As it turned out, this was not a wise decision, which is why we have merged MVC and MVC.FX, and the GEF model-view-controller framework is now dedicated to JavaFX alone. Why?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;First and foremost, because it lead to overcomplicated code that turned out to be a hurdle for adopters. The root visual type parameter, which we had to introduce in order to be able to reason about rendering-related aspects already inside MVC, may be quoted as a good evidence. It provoked that most types within MVC needed to be parameterized, thus leading to a lot of overhead. For instance, to query the current viewer selection, the following had to be done: &lt;/div&gt;&lt;div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;div style=&quot;font-family: monaco; font-size: 11px;&quot;&gt;&lt;span style=&quot;color: #931a68;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;SelectionModel&amp;lt;VR&amp;gt; &lt;span style=&quot;color: #7e504f;&quot;&gt;selectionModel&lt;/span&gt; = &lt;span style=&quot;color: #0326cc;&quot;&gt;viewer&lt;/span&gt;.getAdapter(&lt;span style=&quot;color: #931a68;&quot;&gt;new&lt;/span&gt; TypeToken&amp;lt;SelectionModel&amp;lt;VR&amp;gt;&amp;gt;(){}&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;  .where(&lt;span style=&quot;color: #931a68;&quot;&gt;new&lt;/span&gt; TypeParameter&amp;lt;VR&amp;gt;() {},&lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt; Types.&amp;lt;VR&amp;gt;argumentOf(&lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee; color: #0326cc;&quot;&gt;viewer&lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;.getClass())));&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;  &lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;SelectionModel&amp;lt;VR&amp;gt; &lt;span style=&quot;color: #7e504f;&quot;&gt;selectionModel&lt;/span&gt; = getSelectionModel();&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;List&amp;lt;IContentPart&amp;lt;VR, ? &lt;span style=&quot;color: #931a68;&quot;&gt;extends&lt;/span&gt; VR&amp;gt;&amp;gt; &lt;span style=&quot;color: #7e504f;&quot;&gt;currentSelection&lt;/span&gt; = &lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee; color: #931a68;&quot;&gt;  new&lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt; ArrayList&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee; color: #7e504f;&quot;&gt;selectionModel&lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;.getSelectionUnmodifiable());&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;When applying GEF in customer projects we further learned that client code does indeed need to access concrete, visualization-specific parts more often than we had thought. Many type casts were required to access JavaFX-specifics like the viewer's canvas: &lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;div style=&quot;font-family: Monaco; font-size: 11px; line-height: normal;&quot;&gt;&lt;span style=&quot;background-color: #eeeeee;&quot;&gt;((FXViewer) &lt;span style=&quot;color: #0326cc;&quot;&gt;viewer&lt;/span&gt;).getCanvas().setStyle(FXViewer.&lt;span style=&quot;color: #0326cc;&quot;&gt;FOCUSED_STYLE&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;Further, the separation of generic and JavaFX-specific aspects lead to overcomplicated implementations especially in those parts of the client code that are related to interaction handling (behaviors and policies).&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;It was also unwise because we became aware that supporting multiple rich-client rendering technologies with a single code base does not seem to be as desirable as we initially thought. As far as Java-based rich-client applications, and especially Eclipse, are concerned, JavaFX seems to be the single, obvious choice: it is feature-complete, open-source, hardware accelerated, supported on all major platforms, and can (quite) easily be integrated with SWT. There is no real need for an alternative.&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;And for browser-based applications, a Java-based client framework does not seem to be a valid choice anyway. Here, a framework that makes use of web languages and technologies alone is the only viable option. While there already is a whole zoo of such technologies around, I have the impression that the same flexibility, we currently have reached with GEF for the rich client, is not yet available. We will thus (have to) do something, but that's a different story.&lt;/div&gt;&lt;div style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;Java 9 Compatibility&lt;/h3&gt;While the new JavaFX-based code base that we have developed through GEF4 has made it feasible to use GEF for building standalone Java richt-client applications, the Eclipse platform is still our major target platform. We thus rely on the ability to integrate JavaFX with SWT, and we need to be able to do this in an OSGi environment.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In general, integrating JavaFX with SWT is realized through &lt;i&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/javafx/api/javafx/embed/swt/FXCanvas.html&quot; target=&quot;_blank&quot;&gt;javafx.embed.swt.FXCanvas&lt;/a&gt;&lt;/i&gt;, an integration that is directly shipped as part of JavaFX in its &lt;a href=&quot;https://docs.oracle.com/javase/8/javafx/interoperability-tutorial/fx-swt_interoperability.htm&quot; target=&quot;_blank&quot;&gt;javafx-swt.jar&lt;/a&gt;. FXCanvas subclasses &lt;i&gt;&lt;a href=&quot;http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fswt%2Fwidgets%2FCanvas.html&quot; target=&quot;_blank&quot;&gt;org.eclipse.swt.widgets.Canvas&lt;/a&gt;&lt;/i&gt; and embeds a JavaFX scene, whose contents is rendered as an image and to which (nearly) all SWT events are forwarded. The ability to use this integration in an OSGi-environment is provided through an &lt;a href=&quot;https://wiki.eclipse.org/Adaptor_Hooks&quot; target=&quot;_blank&quot;&gt;Equinox framework extension&lt;/a&gt; that is delivered by &lt;a href=&quot;http://www.eclipse.org/efxclipse/index.html&quot; target=&quot;_blank&quot;&gt;e(fx)clipse&lt;/a&gt;. It ensures that the javafx-swt.jar is available on the classpath of all OSGi bundles that require it. The combination of both thus enables us to use JavaFX within an Eclipse editor or view. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, while e(fx)clipse works quite nicely out of the box, the FXCanvas implementation provided with Java 8 has some problems. Horizontal mouse scroll events and gesture events are, for instance, not forwarded from SWT to the embedded JavaFX scene, image cursors cannot be set, focus cannot be properly traversed, etc. We have thus been providing an FXCanvasEx implementation as well as some helper classes as part of the GEF FX component, that incorporates workarounds for the following issues:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8088862&quot; target=&quot;_blank&quot;&gt;JDK-8088862&lt;/a&gt;: Provide possibility to traverse focus out of FX scene.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8161282&quot; target=&quot;_blank&quot;&gt;JDK-8161282&lt;/a&gt;: FXCanvas does not forward horizontal mouse scroll events to the embedded scene.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8143596&quot; target=&quot;_blank&quot;&gt;JDK-8143596&lt;/a&gt;: Forward touch gestures to FXCanvas embedded scene.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8088147&quot; target=&quot;_blank&quot;&gt;JDK-8088147&lt;/a&gt;: Image cursors not supported.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8159227&quot; target=&quot;_blank&quot;&gt;JDK-8159227&lt;/a&gt;: KeyEvent.doit should be forwarded to KeyEvent.consumed().&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8161587&quot; target=&quot;_blank&quot;&gt;JDK-8161587&lt;/a&gt;: FXCanvas does not update SWT display.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;While that works fine for Java 8, some of the workarounds require access to JDK-internals, which makes them inoperable for Java 9, where such access is now prevented by the newly introduced modularity system.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The only option we saw was to contribute fixes for at least the affected workarounds directly to JavaFX 9, so workarounds within our code base would no longer be needed. That was immanently clear to us when the JIGSAW-fog finally started to lift. Consequently, I contacted the OpenJFX team and became a contributor. And while Oracle has recently had some bad press regarding its open-source engagement, let me emphasize that the OpenJFX team, in particular Kevin Rushforth, made me feel very welcome and greatly supported me in contributing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As the most invasive fixes will thus be covered by FXCanvas in Java 9 directly, I could guard the related workarounds within our FXCanvasEx to only be effective in Java 8. As a result, users of FXCanvasEx can now transparently rely on identical functionality on Java 8 and Java 9. And with Tom Schindl having added support for Java 9 to e(fx)clipse just a few weeks ago (see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=482428&quot; target=&quot;_blank&quot;&gt;bug 482428&lt;/a&gt; for details), running GEF on Java 9 has (finally) become feasible. You can try it yourself:&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Download a recent &lt;a href=&quot;https://jdk9.java.net/download/&quot; target=&quot;_blank&quot;&gt;JDK 9 Early Access&lt;/a&gt; build.&lt;/li&gt;&lt;li&gt;Download a recent &lt;a href=&quot;https://www.eclipse.org/downloads/index-developer.php&quot; target=&quot;_blank&quot;&gt;Eclipse IDE for Eclipse Committers&lt;/a&gt; (Oxygen M5) developers package and adjust the eclipse.ini to point to the downloaded JDK (&lt;i&gt;-vm /Library/Java/JavaVirtualMachines/jdk-9_ea155.jdk/Contents/Home/bin&lt;/i&gt;) and add java.se.ee to the module path by appending&lt;i&gt; --add-modules=java.se.ee&lt;/i&gt; after the vm arguments.&lt;/li&gt;&lt;li&gt;Install '&lt;i&gt;e(fx)clipse - Minimal JavaFX OSGi integration bundles&lt;/i&gt;' 3.0.0 developers snapshot from &lt;a href=&quot;http://download.eclipse.org/efxclipse/updates-nightly/site&quot; target=&quot;_blank&quot;&gt;http://download.eclipse.org/efxclipse/updates-nightly/site&lt;/a&gt; (the feature is ungrouped, thus you have to uncheck the 'Group items by category' checkbox in the Eclipse installer dialog).&lt;/li&gt;&lt;li&gt;Install '&lt;i&gt;GEF MVC Examples with Sources&lt;/i&gt;' and '&lt;i&gt;GEF Zest Examples with Sources&lt;/i&gt;' 5.0.0 development snapshot from &lt;a href=&quot;http://download.eclipse.org/tools/gef/updates/integration&quot; target=&quot;_blank&quot;&gt;http://download.eclipse.org/tools/gef/updates/integration&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;The '&lt;i&gt;GEF MVC Logo Example&lt;/i&gt;' and the '&lt;i&gt;GEF Zest Graph Example&lt;/i&gt;' views (located in the 'Other' category) can now be opened:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-N-53IRhtyAM/WJiqq3ELwvI/AAAAAAAAATI/32iKhAB-oe07SS0jJAB3eTGEWPVxcxwAgCEw/s1600/Bildschirmfoto%2B2017-02-06%2Bum%2B17.55.36.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;449&quot; src=&quot;https://4.bp.blogspot.com/-N-53IRhtyAM/WJiqq3ELwvI/AAAAAAAAATI/32iKhAB-oe07SS0jJAB3eTGEWPVxcxwAgCEw/s640/Bildschirmfoto%2B2017-02-06%2Bum%2B17.55.36.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In case, as an adopter, you already want to try developing bundles against a JavaSE-9 execution environment (BREE), you will have to install '&lt;i&gt;e(fx)clipse - IDE - PDE&lt;/i&gt;' 3.0.0 from &lt;a href=&quot;http://download.eclipse.org/efxclipse/updates-nightly/site&quot;&gt;http://download.eclipse.org/efxclipse/updates-nightly/site&lt;/a&gt; in addition (which will 'inject' javafx-swt.jar to your bundle dependencies), and you will have to update the '&lt;i&gt;Eclipse Java Developer Tools&lt;/i&gt;' to the Java 9 preview available at &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.7-Y-builds&quot; target=&quot;_blank&quot;&gt;http://download.eclipse.org/eclipse/updates/4.7-Y-builds&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Give it a try, all early feedback will be more than welcome!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 09 Feb 2017 17:13:04 +0000</pubDate>
	<author>noreply@blogger.com (Alexander Nyßen)</author>
</item>
<item>
	<title>Kichwa Coders: Diversity means Open Source for a New Generation</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1078</guid>
	<link>https://kichwacoders.com/2017/02/09/diversity-means-open-source-for-a-new-generation/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;img_20160511_183256&quot; class=&quot;alignnone size-full wp-image-1080&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/img_20160511_183256.jpg?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Last month the Eclipse Foundation announced a new &lt;a href=&quot;https://theaaaaaa.wordpress.com/2017/01/24/diversity-at-eclipse/&quot; target=&quot;_blank&quot;&gt;Diversity &amp;amp; Inclusion Champion, Thea Aldrich&lt;/a&gt;. I did cartwheels in my head when I heard the news. Why? Because I can’t do cartwheels in real life. But seriously, this is really a BIG DEAL.&lt;/p&gt;
&lt;p&gt;When it comes to open source communities like Eclipse, you don’t need big data to know there is a diversity problem, you just have to show up to an EclipseCon and look around.&lt;/p&gt;
&lt;div class=&quot;embed-twitter&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;a href=&quot;https://twitter.com/IanSkerrett&quot;&gt;@IanSkerrett&lt;/a&gt; I did a talk in Theatre Stage yesterday. Full room, nearly 200 people, only one woman. We have a diversity problem. &lt;a href=&quot;https://twitter.com/hashtag/EclipseCon?src=hash&quot;&gt;#EclipseCon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Neil Bartlett (@nbartlett) &lt;a href=&quot;https://twitter.com/nbartlett/status/791577601466826753&quot;&gt;October 27, 2016&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;While this has been the case for years, recently there has been a change. Maybe it’s down to more consciousness of the issues or maybe more maturity in the community, but people have noticed and want to do something about it.  About a year ago, a grassroots effort led by Alex Schladebeck was started with the renewed goal of improving diversity in the community and at conferences. I was honoured to be part of the small but effective team. One big goal of ours was simply to raise awareness and start an open conversation about issues surrounding diversity. We did just that, through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Writing&lt;/strong&gt;: &lt;a href=&quot;https://kichwacoders.com/2016/05/12/whose-job-is-it-promote-diversity-in-the-eclipse-community/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt;, after &lt;a href=&quot;https://www.bredex.de/detail/?tx_ttnews%5Btt_news%5D=228&amp;amp;cHash=12ac984c2901c082457ac39742451a44&quot; target=&quot;_blank&quot;&gt;blog pos&lt;/a&gt;t, after &lt;a href=&quot;https://opensource.com/article/17/1/take-action-diversity-tech&quot;&gt;blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speaking&lt;/strong&gt;: I do a diversity talk ‘&lt;a href=&quot;https://www.youtube.com/watch?v=GDn2mRmIw5g&amp;amp;t=2s&quot; target=&quot;_blank&quot;&gt;7 Habits of Highly Diverse Communities&lt;/a&gt;’, which has been well received and requested by other open source communities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Discussions&lt;/strong&gt;: we have a dedicated &lt;a href=&quot;https://mattermost.eclipse.org/eclipse/channels/diversity&quot; target=&quot;_blank&quot;&gt;Mattermost channel&lt;/a&gt; at Eclipse for the topic, plus several web conferences.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In Person Discussions&lt;/strong&gt;: we have had Diversity BOFs at EclipseCons, as well as addressed the Eclipse Board of Directors &amp;amp; Members’ meeting.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;embed-twitter&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Great suggestions coming from the diversity bof  &lt;a href=&quot;https://twitter.com/hashtag/eclipsecon?src=hash&quot;&gt;#eclipsecon&lt;/a&gt; &lt;a href=&quot;https://t.co/36Z7oCmqkz&quot;&gt;pic.twitter.com/36Z7oCmqkz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Tracy Miranda (@tracymiranda) &lt;a href=&quot;https://twitter.com/tracymiranda/status/790987925215412224&quot;&gt;October 25, 2016&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;And we’ve been learning a lot along the way, such as when we tried and failed to secure a woman keynote speaker for one of the conferences. However,the best thing about all this has been how the rest of the community has responded. People have shown up, got involved, asked questions, challenged things (I expect nothing less of developers!) and offered support.&lt;/p&gt;
&lt;p&gt;Throughout this, and even from the beginning, we have always wondered how we can sustain these efforts and indeed how we can expand them to do more. There is no quick fix for promoting diversity, more just a continuous and determined set of steps in the right direction. And in reality it would never work long term without someone dedicated to spearheading the changes.&lt;/p&gt;
&lt;p&gt;So that is why, in less than a year after we implored the Foundation to make this happen, they listened, took us seriously and did it! Not just that, the Eclipse Foundation now becomes an Open Source Foundation investing in change, with a &lt;strong&gt;dedicated role&lt;/strong&gt; to diversity. We can hope this becomes a must-have role for every open source foundation out there.&lt;/p&gt;
&lt;p&gt;I’ve always said how much &lt;a href=&quot;https://kichwacoders.com/2016/02/12/3-reasons-i-love-eclipse/&quot; target=&quot;_blank&quot;&gt;I love this community&lt;/a&gt; because of the ability to adapt to changing environments, and here is more proof. Thea has already kicked off efforts on multiple fronts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifying ways in which all Eclipse events are inclusive events and welcoming,&lt;/li&gt;
&lt;li&gt;Rolling out an ambassador program to involve the community in welcoming newcomers into the ecosystem,&lt;/li&gt;
&lt;li&gt;Reaching out to established projects to see how we can support their efforts,&lt;/li&gt;
&lt;li&gt;Making all Eclipse Foundation websites and resources easier to navigate for native non-English speakers,&lt;/li&gt;
&lt;li&gt;Providing the community with a direct path to Foundation staff for ideas, complaints, feedback and other issues that our community or members may encounter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We look forward to working with Thea, the Foundation and community on all these aspects to keep making improvements and bring about a real change.I will continue to do what I can, which includes &lt;a href=&quot;https://eclipse.org/org/elections/nominees.php&quot; target=&quot;_blank&quot;&gt;running for a seat&lt;/a&gt; on the Board of Directors. Having this new focus and investment in diversity means we can look forward to bringing open source to a whole new generation of developers.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1078/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1078/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1078&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 09 Feb 2017 12:57:02 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms – Day 4 – Visibility Rules</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27493</guid>
	<link>http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms is a framework to efficiently build form-based web UIs. These UIs allow end users to enter, modify and view data and are usually embedded in a business application. JSON Forms eliminates the need to write HTML templates and Javascript for databinding by hand. It supports to create customizable forms by leveraging the capabilities of JSON and &lt;/span&gt;&lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON schema&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and providing a simple and declarative way of describing forms. Forms are then rendered with a UI framework, currently one that is based on AngularJS. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you would like to know more about JSON Forms the &lt;/span&gt;&lt;a href=&quot;http://jsonforms.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms homepage&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a good starting point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we would like to introduce the framework based on a real-world example application, a task tracker called “Make It happen”. On &lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;day 1&lt;/a&gt; and &lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;day 2&lt;/a&gt;, we described the overall requirements and already created a fully working form for the entity “Task”. On &lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;day 3&lt;/a&gt; we showed how to extend the form with new attributes and controls. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you would like to follow this blog series please &lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;follow us on twitter&lt;/a&gt;. We will announce every new blog post on JSON Forms there.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The result of the first three days is currently looking like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day3_form.png&quot;&gt;&lt;img alt=&quot;jsonforms_blogseries_day3_form&quot; class=&quot;alignnone size-full wp-image-27491&quot; height=&quot;463&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day3_form.png&quot; width=&quot;566&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;On day four we will add two more attributes to the task entity, which allows you to set up repeated tasks. For these new attributes, we will configure their visibility in the form based on the current input. Let us start with the attributes, first:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;“Recurrence” (Enum) – Can be take the values “Never”, “Daily”, “Weekly” or “Monthly”&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;“Recurrence Interval” (Integer) – Describes in combination with “Recurrence”, how often a task is to be repeated, e.g. every 2 days or every 3 weeks&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Like before, we simply add those two new attributes to our data schema and automatically derive the extended UI schema from that. The following snippet shows the data schema:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;object&quot;,
    &quot;properties&quot;: {
      &quot;name&quot;: {
        &quot;type&quot;: &quot;string&quot;
      },
      &quot;description&quot;: {
        &quot;type&quot;: &quot;string&quot;
      },
      &quot;done&quot;: {
        &quot;type&quot;: &quot;boolean&quot;
      },
      &quot;due_date&quot;: {
        &quot;type&quot;: &quot;string&quot;,
        &quot;format&quot;: &quot;date&quot;
      },
      &quot;rating&quot;: {
        &quot;type&quot;: &quot;integer&quot;,
        &quot;maximum&quot;: 5
      },
      &quot;recurrence&quot;: {
          &quot;type&quot;: &quot;string&quot;,
          &quot;enum&quot;:[&quot;Never&quot;,&quot;Daily&quot;,&quot;Weekly&quot;,&quot;Monthly&quot;]
      },
      &quot;recurrence_interval&quot;:{
          &quot;type&quot;: &quot;integer&quot;
      }
    },
    &quot;required&quot;: [&quot;name&quot;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically add the two new attributes to our form:&lt;/span&gt;&lt;br /&gt;
&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day4_form1.png&quot;&gt;&lt;img alt=&quot;jsonforms_blogseries_day4_form1&quot; class=&quot;alignnone size-full wp-image-27494&quot; height=&quot;628&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day4_form1.png&quot; width=&quot;650&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, if we look at the two new attributes more in detail, there is an inconsistency. If the “Recurrence” is set to “Never”, it does not makes sense to enter a “Recurrence Interval”. Therefore, we want to hide the “Recurrence Interval” in this case. JSON Forms support this use case using so called “visibility rules”. These rules can be added to any element and define when an element shall be visible and when not. In our particular case, we will directly attach the visibility rule to the control, which displays the “Recurrence Interval”. As you can see in the following snippet at the very end, it points directly to the attribute “Recurrence” and defines for which value of “Recurrence” the control should be hidden:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;type&quot;: &quot;VerticalLayout&quot;,
  &quot;elements&quot;: [
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/name&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;label&quot;: false,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/done&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/description&quot;
      },
      &quot;options&quot;: {
        &quot;multi&quot;:true
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/due_date&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/rating&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/recurrence_interval&quot;
      },
      &quot;rule&quot;: {
          &quot;effect&quot;: &quot;HIDE&quot;,
          &quot;condition&quot;: {
              &quot;scope&quot;: {
                  &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
              },
              &quot;expectedValue&quot;: &quot;Never&quot;
          }
      }
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Without any additional coding, JSON Forms will add the new behavior to our form, that means, the “Recurrence Interval” is not visible anymore, if we set the “Recurrence” to “Never”:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day4_form2.png&quot;&gt;&lt;img alt=&quot;jsonforms_blogseries_day4_form2&quot; class=&quot;alignnone size-full wp-image-27495&quot; height=&quot;546&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day4_form2.png&quot; width=&quot;648&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Here is the lower part with a different Recurrence Value selected:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day4_form3.png&quot;&gt;&lt;img alt=&quot;jsonforms_blogseries_day4_form3&quot; class=&quot;alignnone size-full wp-image-27496&quot; height=&quot;186&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2016/12/jsonforms_blogseries_day4_form3.png&quot; width=&quot;648&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in trying out JSON Forms, please refer to the &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/firstform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Getting-Started tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It explains how to set up JSON Forms in your project and how you can try the first steps out yourself. If you would like to follow this blog series, please &lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;follow us on twitter&lt;/a&gt;. We will announce every new blog post on JSON Forms there.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We hope to see you soon for the next day!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;List of all available days to date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;Day 0 and 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;Day 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;Day 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=JSON+Forms+%26%238211%3B+Day+4+%26%238211%3B+Visibility+Rules&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&amp;amp;t=JSON+Forms+%26%238211%3B+Day+4+%26%238211%3B+Visibility+Rules&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angularjs/&quot; title=&quot;AngularJS Tag&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/forms/&quot; title=&quot;Forms Tag&quot;&gt;Forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-schema/&quot; title=&quot;JSON Schema Tag&quot;&gt;JSON Schema&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angularjs/&quot; title=&quot;AngularJS Tag&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/forms/&quot; title=&quot;Forms Tag&quot;&gt;Forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-schema/&quot; title=&quot;JSON Schema Tag&quot;&gt;JSON Schema&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 09 Feb 2017 11:09:05 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Vert.x 3.4.0.Beta1 release</title>
	<guid isPermaLink="true">http://vertx.io/blog/vert-x-3-4-0-beta1-release</guid>
	<link>http://vertx.io/blog/vert-x-3-4-0-beta1-release</link>
	<description>&lt;article&gt;&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;we have released 3.4.0.Beta1, this release is the biggest since Vert.x 3.0.0 with plenty of great futures.&lt;/p&gt;
&lt;p&gt;You can use consume it in your projects from Maven or Gradle as usual with the version &lt;code&gt;3.4.0.Beta1&lt;/code&gt; or read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;http://vertx.io/docs/3.4.0.Beta1/&quot;&gt;documentation preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc&quot;&gt;release notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;see the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT&quot;&gt;actual examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me outline the important changes you can already find in this Beta1.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-web-client&quot;&gt;Vert.x Web Client&lt;/h2&gt;
&lt;p&gt;in a simple sentence “Vert.x Web Client is to Vert.x HttpClient what Vert.x Web is to HttpServer”&lt;/p&gt;
&lt;p&gt;The Web Client makes easy to do HTTP request/response interactions with a web server, and provides advanced features like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Json body encoding / decoding&lt;/li&gt;
&lt;li&gt;request/response pumping&lt;/li&gt;
&lt;li&gt;request parameters&lt;/li&gt;
&lt;li&gt;unified error handling&lt;/li&gt;
&lt;li&gt;form submissions&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Built on top of HttpClient, it naturally inherits its features and provides a better API, let me give an overview in one example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;WebClient&lt;/span&gt; client = &lt;span class=&quot;hljs-type&quot;&gt;WebClient&lt;/span&gt;.
client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .&lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;BodyCodec&lt;/span&gt;.json(&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;.class))
  .send(ar -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {

      &lt;span class=&quot;hljs-type&quot;&gt;HttpResponse&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;&amp;gt; response = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
      &lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt; user = response.body();

      &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Received response with status code&quot;&lt;/span&gt; + response.statusCode() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; with body &quot;&lt;/span&gt; +
        user.getFirstName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + user.getLastName());
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + ar.cause().getMessage());
    }
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rxjava-singles&quot;&gt;RxJava singles&lt;/h2&gt;
&lt;p&gt;RxJava is a very popular Java extension and in this release we focused on the API usability with the support
of the &lt;code&gt;Single&lt;/code&gt; RxJava type.&lt;/p&gt;
&lt;p&gt;The new methods are prefixed by &lt;code&gt;rx&lt;/code&gt; and deprecates the &lt;code&gt;Observable&lt;/code&gt; suffixed methods.&lt;/p&gt;
&lt;p&gt;So instead of starting a server with &lt;code&gt;listenObservable&lt;/code&gt; now you use &lt;code&gt;rxListen&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;HttpServer &lt;span class=&quot;hljs-built_in&quot;&gt;server&lt;/span&gt; = vertx.createHttpServer();
Single single = &lt;span class=&quot;hljs-built_in&quot;&gt;server&lt;/span&gt;.rxListen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);
single.subscribe(
  ok -&amp;gt; System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server started&quot;&lt;/span&gt;),
  &lt;span class=&quot;hljs-built_in&quot;&gt;err&lt;/span&gt; -&amp;gt; System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;err&lt;/span&gt;.getMessage()));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One noticeable difference with the previous API, is that the &lt;code&gt;listen&lt;/code&gt; method is called when the &lt;code&gt;Single&lt;/code&gt; is subscribed.&lt;/p&gt;
&lt;p&gt;This is very handy when combined with the new web client:&lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;Single&amp;gt;&lt;/span&gt; single = client
   .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
   .rxSend();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Send&lt;/span&gt; the request
&lt;span class=&quot;hljs-prompt&quot;&gt;single.subscribe(response -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;got response &quot;&lt;/span&gt; + response.statusCode());

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Send&lt;/span&gt; the request again
&lt;span class=&quot;hljs-prompt&quot;&gt;single.subscribe(response -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;got response &quot;&lt;/span&gt; + response.statusCode());&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;polyglot&quot;&gt;Polyglot&lt;/h2&gt;
&lt;p&gt;In this beta you can try &lt;em&gt;Vert.x for Kotlin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Vert.x for Kotlin&lt;/em&gt; is based on the Java API and provides also the execution of Kotlin Verticles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.*&lt;/span&gt;
&lt;span class=&quot;hljs-preprocessor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.kotlin.core.http.HttpServerOptions&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Server&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt;() {&lt;/span&gt;

  override fun start() {
    vertx.createHttpServer(

        // We provide Kotlin extension methods, allowing &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; use an idiomatic Kotlin API &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; building these options
        HttpServerOptions(
            port = &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;,
            host = &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;
        ))
        .requestHandler() { req -&amp;gt;
          req.response().&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello from Kotlin&quot;&lt;/span&gt;)
        }
        .listen()
    println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server started on 8080&quot;&lt;/span&gt;)
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be directly ran from the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;julien:vertx-kotlin-example julien$ vertx &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; Server.kt
Server started &lt;span class=&quot;hljs-function_start&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;
Succeeded &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; deploying verticle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, Kotlin is using directly the Java API and we thought that it might be a cool thing to do the
same with Groovy support. So we have reconsidered our Groovy support and now it uses the plain Java API,
without loosing the existing features.&lt;/p&gt;
&lt;p&gt;Thanks to Groovy extension methods, idiomatic Groovy it still supporting while benefiting of the full Java API!&lt;/p&gt;
&lt;p&gt;Scala support is also planned for 3.4.0 and will be released soon, watch &lt;a href=&quot;https://twitter.com/vertx_project&quot;&gt;@vertx_project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-microservices-story-goes-on-&quot;&gt;The microservices story goes on…&lt;/h2&gt;
&lt;p&gt;Our API have matured and now they have been moved out of tech preview, of course this wasn’t enough and we now
have &lt;em&gt;Vert.x Config&lt;/em&gt;, an extensible way to configure Vert.x applications supporting File, json, ENV, system properties,
HTTP, &lt;em&gt;Kubernetes Configmap&lt;/em&gt;, &lt;em&gt;Consul&lt;/em&gt;, &lt;em&gt;Spring Config Server&lt;/em&gt;, &lt;em&gt;Redis&lt;/em&gt;, &lt;em&gt;Git&lt;/em&gt;, &lt;em&gt;Zookeeper&lt;/em&gt;, … stores as well as
several formats: properties file, YAML and Hocon.&lt;/p&gt;
&lt;p&gt;Here is a small example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;ConfigStoreOptions httpStore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigStoreOptions()
  .setType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http&quot;&lt;/span&gt;)
  .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
    .&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/conf&quot;&lt;/span&gt;));

ConfigStoreOptions fileStore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigStoreOptions()
  .setType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;)
  .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my-config.json&quot;&lt;/span&gt;));

ConfigStoreOptions sysPropsStore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigStoreOptions().setType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sys&quot;&lt;/span&gt;);

ConfigRetrieverOptions &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigRetrieverOptions()
  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);

ConfigRetriever retriever = ConfigRetriever.create(vertx, &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vert.x Config also supports push based notification style:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;ConfigRetriever retriever &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; ConfigRetriever&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;create(Vertx&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;vertx(), options);
retriever&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;configStream()
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;endHandler(v &lt;span class=&quot;hljs-subst&quot;&gt;-&amp;gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// retriever closed&lt;/span&gt;
  })
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;exceptionHandler(t &lt;span class=&quot;hljs-subst&quot;&gt;-&amp;gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// an error has been caught while retrieving the configuration&lt;/span&gt;
  })
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;handler(conf &lt;span class=&quot;hljs-subst&quot;&gt;-&amp;gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// the configuration&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vertx-mqtt-server&quot;&gt;Vertx MQTT Server&lt;/h2&gt;
&lt;p&gt;Vert.x MQTT Server is able to handle connections, communication and messages exchange with remote MQTT clients.
Its API provides a bunch of events related to protocol messages received by clients and exposes allow to send
messages to them.&lt;/p&gt;
&lt;p&gt;Here is a small effective example of creating, the Vert.x way!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttServerOptions &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttServerOptions()
  .setPort(&lt;span class=&quot;hljs-number&quot;&gt;1883&lt;/span&gt;)
  .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;);

MqttServer server = MqttServer.create(vertx, &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt;);

server.endpointHandler(endpoint -&amp;gt; {

  System.out.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connected client &quot;&lt;/span&gt; + endpoint.clientIdentifier());

  endpoint.publishHandler(message -&amp;gt; {

    System.out.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Just received message on [&quot;&lt;/span&gt; + message.topicName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;] payload [&quot;&lt;/span&gt; +
      message.payload() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;] with QoS [&quot;&lt;/span&gt; +
      message.qosLevel() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);
  });

  endpoint.accept(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;);
});

server.listen(ar -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.out.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MQTT server started and listening on port &quot;&lt;/span&gt; + server.actualPort());
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.err.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MQTT server error on start&quot;&lt;/span&gt; + ar.cause().getMessage());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vert-x-sql-streaming&quot;&gt;Vert.x SQL streaming&lt;/h2&gt;
&lt;p&gt;We now supports streaming style for SQL queries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;connection.queryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;select * from test&quot;&lt;/span&gt;, stream -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (stream.succeeded()) {
    &lt;span class=&quot;hljs-type&quot;&gt;SQLRowStream&lt;/span&gt; sqlRowStream = stream.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();

    sqlRowStream
      .handler(row -&amp;gt; {
        // &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; the row...
        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(row.encode());
      })
      .endHandler(v -&amp;gt; {
        // no more data available, close the connection
        connection.close(done -&amp;gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (done.failed()) {
            throw new &lt;span class=&quot;hljs-type&quot;&gt;RuntimeException&lt;/span&gt;(done.cause());
          }
        });
      });
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with the RxJava API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client
  .rxGetConnection() // &lt;span class=&quot;hljs-type&quot;&gt;Connect&lt;/span&gt; to the database
  .flatMapObservable(conn -&amp;gt; { // &lt;span class=&quot;hljs-type&quot;&gt;With&lt;/span&gt; the connection...
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; conn.rxUpdate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CREATE TABLE test(col VARCHAR(20))&quot;&lt;/span&gt;) // ...create test table
      .flatMap(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&amp;gt; conn.rxUpdate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO test (col) VALUES ('val1')&quot;&lt;/span&gt;)) // ...insert a row
      .flatMap(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&amp;gt; conn.rxUpdate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO test (col) VALUES ('val2')&quot;&lt;/span&gt;)) // ...another one
      .flatMap(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&amp;gt; conn.rxQueryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test&quot;&lt;/span&gt;)) // ...get values stream
      .flatMapObservable(sqlRowStream -&amp;gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlRowStream.toObservable() // &lt;span class=&quot;hljs-type&quot;&gt;Transform&lt;/span&gt; the stream into an &lt;span class=&quot;hljs-type&quot;&gt;Observable&lt;/span&gt;...
          .doOnTerminate(conn::close); // ...&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; close the connection &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; the stream &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; fully read &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; an error occurs
      });
  }).subscribe(row -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Row : &quot;&lt;/span&gt; + row.encode()));&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
&lt;p&gt;In addition of all these brillants features here is a list of more-than-noticeable things you have in this Beta1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Infinispan replaces Vert.x Jgroups cluster manager&lt;/li&gt;
&lt;li&gt;Vert.x Consul Client provides a full fledged client for Consul&lt;/li&gt;
&lt;li&gt;Oauth2 predefined configuration with 16 settings from &lt;em&gt;Azure Active Directory&lt;/em&gt;, to &lt;em&gt;Twitter&lt;/em&gt; with the usual suspects (&lt;em&gt;Facebook&lt;/em&gt;, &lt;em&gt;LinkedIn&lt;/em&gt;, …)&lt;/li&gt;
&lt;li&gt;Http client now follow redirects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use consume it in your projects from Maven or Gradle as usual with the version &lt;code&gt;3.4.0.Beta1&lt;/code&gt; or read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;http://vertx.io/docs/3.4.0.Beta1/&quot;&gt;documentation preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc&quot;&gt;release notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;see the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT&quot;&gt;actual examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least, I want to personally thank all the persons that contributed to this release, beyond the Vert.x core team, the actual
 Vert.x committers and many other persons have brought a lot of efforts in this upcoming 3.4.0!!!!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus-RT in Argentina</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=445</guid>
	<link>https://papyrusuml.wordpress.com/2017/02/08/papyrus-rt-in-argentina/</link>
	<description>&lt;p&gt;Congratulations to my minions from &lt;a href=&quot;http://www.cs.queensu.ca/&quot; target=&quot;_blank&quot;&gt;Queen’s University&lt;/a&gt;, Nicolas Hili, Juergen Dingel, and Alain Beaulieu, for getting their “&lt;strong&gt;&lt;a href=&quot;http://icse2017.gatech.edu/?q=technical_briefings_program target=&quot;&gt;Modeling and Code Generation for Embedded Real Time Systems with UML-RT and Papyrus-RT 1.0&lt;/a&gt;&lt;/strong&gt;” technical briefing accepted at the 39&lt;sup&gt;th&lt;/sup&gt; &lt;abbr title=&quot;International Conference on Software Engineering&quot;&gt;&lt;a href=&quot;http://icse2017.gatech.edu/&quot; target=&quot;_blank&quot;&gt;ICSE&lt;/a&gt;&lt;/abbr&gt;!&lt;/p&gt;
&lt;p&gt;Will you be at that conference? If so, I would suggest you attend their briefing to learn more about one of my incarnations! Their briefing is currently &lt;a href=&quot;http://icse2017.gatech.edu/?q=technical_briefings_program&quot; target=&quot;_blank&quot;&gt;scheduled&lt;/a&gt; for May 23&lt;sup&gt;rd&lt;/sup&gt;, track 2, from 09:00 to 10:30!&lt;/p&gt;
&lt;p&gt;I am sure they will be happy to see you in Buenos Aires and discuss ME with you!&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/conference/&quot;&gt;Conference&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/codegen/&quot;&gt;codegen&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/community/&quot;&gt;community&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/embedded/&quot;&gt;embedded&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/real-time/&quot;&gt;real time&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/445/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=445&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 08 Feb 2017 14:25:04 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Take the IoT Developer Survey!</title>
	<guid isPermaLink="false">https://medium.com/p/318b6123cbe7</guid>
	<link>https://medium.com/@roxanne.iot/why-the-iot-developer-survey-matters-318b6123cbe7?source=rss-82f8afd3e513------2</link>
	<description>&lt;div class=&quot;medium-feed-item&quot;&gt;&lt;p class=&quot;medium-feed-snippet&quot;&gt;Yesterday the IoT Developer Survey opened up to respondents. Today I am going to tell you why should participate.&lt;/p&gt;&lt;p class=&quot;medium-feed-link&quot;&gt;&lt;a href=&quot;https://medium.com/@roxanne.iot/why-the-iot-developer-survey-matters-318b6123cbe7?source=rss-82f8afd3e513------2&quot;&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 08 Feb 2017 12:00:05 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che – Day 0: Motivation and getting started</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27777</guid>
	<link>http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/</link>
	<description>&lt;p&gt;At EclipseCon North America 2016, the first public release of Eclipse Che was announced. Almost immediately, there was a new cloud-based IDE in the Eclipse ecosystem. At first glance, it is an IDE running in the browser:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image02-2.png&quot;&gt;&lt;img alt=&quot;image02&quot; class=&quot;aligncenter  wp-image-27787&quot; height=&quot;421&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image02-2-1024x601.png&quot; width=&quot;718&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, there is one particular feature, which makes Che interesting: &lt;/span&gt;&lt;b&gt;Sharable Workspaces&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. A “workspace” in Che means the source of a project PLUS the runtime to compile, debug, and execute it. Workspaces are traditionally a local concept, developers check-out the sources and then install quite some tools to work with the source code. Che uses Docker containers to power workspace runtimes, which can be hosted on a server. This makes it simple to share a workspace with other developers. This avoids complicated setups and extra effort when joining a project. If you want to learn more about Che, please &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;visit the project home page&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Of course, we at EclipseSource are interested in this new technology. One part of our interest is obviously how to use it and how powerful Eclipse Che is compared to the existing Eclipse IDE. However, as a technology provider, we are even more interested in extending and adapting the new framework to provide missing features. Can we reuse technologies built in Eclipse in a cloud IDE?&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Therefore, we immediately gave it a try ourselves: extending Che with a new plugin. Our goal is to learn about the platform, build up experience and finally to provide feedback to the core development team about the extension use case. To achieve this, we want to work along a real use case. We selected a feature that we are particularly familiar with, but is not yet supported in Che: The &lt;/span&gt;&lt;b&gt;Eclipse Modeling Framework&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (EMF tooling) including generating code. In case you do not know EMF: It is a very pragmatic modeling framework to generate entity classes in Java. In a nutshell, it is like Java Beans, but more powerful and less manual work. If you are interested in EMF, please see &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/tutorials/emf-tutorial/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for a getting started tutorial.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We want to share our experience in building EMF Support in Che as well as technical solutions in a blog series starting with this post. The following diagram shows our overall use case:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image06.png&quot;&gt;&lt;img alt=&quot;image06&quot; class=&quot;aligncenter size-full wp-image-27780&quot; height=&quot;180&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image06.png&quot; width=&quot;624&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let us separate the use case into different parts: &lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Create Modeling Project&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a first step we want to be able to create a “modeling project” – a project with all the typical artefacts of an Ecore bundle. That is mainly a .ecore file for the model and a .genmodel file for the code generation. Therefore, we need to extend Che to include a template to be instantiated or ideally including a new project wizard. In a very first step, we might use an existing template project, as this would already enable us to work on the following requirements.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Edit Ecore and GenModel&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course, we want to modify both artefacts, so we need an editor capable of doing that. In the simplest case, we need a text-based editor. This editor must be associated with the new file types .ecore and .genmodel.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Generate Code&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As the goal of EMF is usually to generate code from Ecore models, we want to support the code generation in Che as well. As we do not want to re-implement the EMF code generator, we must find a way to integrate the existing generator into Che. Finally, we need an action in the Che IDE to trigger the code generation.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Form-Based Editor for Ecore and Genmodel&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, we want to provide the same comfort for editing Ecore and GenModels as the Eclipse IDE does, therefore, we need a tree/form-based editor.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The good news is that all this is possible in Che and we implemented a prototype of EMF support in Che fulfilling all the described requirements. If you are interested in looking at the code, you can find it in &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipsesource/emf4che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this repository&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, what is even more interesting is &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;how&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we built this prototype. We will describe all of the steps of the development in a blog series starting with this post. We will describe how we explored Che during the implementation. We will describe intermediate steps of the implementation, which were later refined. And along the way, you the reader, will also explore Che step-by-step. The next post will describe how to add a custom modeling workspace to Che, which already contains some example project to get started with.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;get in contact with us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;
&lt;div class=&quot;row&quot; style=&quot;padding: 0em;&quot;&gt;
&lt;div class=&quot;col2&quot;&gt;&lt;img alt=&quot;_MG_4540b2&quot; class=&quot;alignnone wp-image-23168&quot; height=&quot;86&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/mathias.jpg&quot; width=&quot;129&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;col10&quot;&gt;&lt;strong&gt;Co-Author&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;col10&quot;&gt;Mat Hansen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=EMF+Support+for+Che+%26%238211%3B+Day+0%3A+Motivation+and+getting+started&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&amp;amp;t=EMF+Support+for+Che+%26%238211%3B+Day+0%3A+Motivation+and+getting+started&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/#comments&quot;&gt;3 Comments&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 08 Feb 2017 11:53:48 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Participate in the IoT Developer Survey 2017</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/jToW5oHpCb8/iotdevsurvey2017.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/jToW5oHpCb8/iotdevsurvey2017.php</link>
	<description>We are pleased to launch the third annual IoT Developer Survey. Complete the survey now.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/jToW5oHpCb8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 07 Feb 2017 10:45:00 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: JaCoCo Code Coverage and Report of multiple Eclipse plug-in projects</title>
	<guid isPermaLink="false">http://www.lorenzobettini.it/?p=911</guid>
	<link>http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/</link>
	<description>&lt;p&gt;In this tutorial I’ll show how to use Jacoco with Maven/Tycho to create a code coverage report of multiple Eclipse plug-in projects.&lt;/p&gt;
&lt;p&gt;The code of the example is available here: &lt;a href=&quot;https://github.com/LorenzoBettini/tycho-multiproject-jacoco-report-example&quot; target=&quot;_blank&quot;&gt;https://github.com/LorenzoBettini/tycho-multiproject-jacoco-report-example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the structure of the projects:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/jacoco-report-projects/&quot; rel=&quot;attachment wp-att-915&quot;&gt;&lt;img alt=&quot;jacoco-report-projects&quot; class=&quot;aligncenter size-full wp-image-915&quot; height=&quot;277&quot; src=&quot;http://www.lorenzobettini.it/wp-content/uploads/2017/02/jacoco-report-projects.png&quot; width=&quot;286&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each project’s code is tested in a specific .tests project. The code consists of simple Java classes doing nothing interesting, and tests just call that code.&lt;/p&gt;
&lt;p&gt;The Maven parent pom file is written such that Jacoco is enabled only when the profile “jacoco” is explicitly activated:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;profile&amp;gt;
	&amp;lt;id&amp;gt;jacoco&amp;lt;/id&amp;gt;
	&amp;lt;activation&amp;gt;
		&amp;lt;activeByDefault&amp;gt;false&amp;lt;/activeByDefault&amp;gt;
	&amp;lt;/activation&amp;gt;
	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.jacoco&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;jacoco-maven-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;version&amp;gt;${jacoco-version}&amp;lt;/version&amp;gt;
				&amp;lt;configuration&amp;gt;
					&amp;lt;excludes&amp;gt;
						&amp;lt;exclude&amp;gt;**/plugin1/Main.class&amp;lt;/exclude&amp;gt;
					&amp;lt;/excludes&amp;gt;
				&amp;lt;/configuration&amp;gt;
				&amp;lt;executions&amp;gt;
					&amp;lt;execution&amp;gt;
						&amp;lt;goals&amp;gt;
							&amp;lt;goal&amp;gt;prepare-agent&amp;lt;/goal&amp;gt;
						&amp;lt;/goals&amp;gt;
					&amp;lt;/execution&amp;gt;
				&amp;lt;/executions&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;
&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;This is just an example of configuration; you might want to tweak it as you see fit for your own projects (in this example I also created a Main.java with a main method that I exclude from the coverage). By default, the &lt;strong&gt;jacoco-maven-plugin&lt;/strong&gt; will “prepare” the Jacoco agent in the property &lt;strong&gt;tycho.testArgLine&lt;/strong&gt; (since our test projects are Maven projects with packaging &lt;strong&gt;eclipse-plugin-test&lt;/strong&gt;); since tycho.testArgLine is automatically used by the tycho-surefire-plugin and since we have no special test configuration, the pom.xml of our test projects is just as simple as this:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;example.parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
	&amp;lt;/parent&amp;gt;
	&amp;lt;artifactId&amp;gt;example.plugin1.tests&amp;lt;/artifactId&amp;gt;
	&amp;lt;packaging&amp;gt;eclipse-test-plugin&amp;lt;/packaging&amp;gt;

&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;if you need a custom configuration, then you have to explicitly mention ${tycho.testArgLine} in the &amp;lt;argLine&amp;gt;.&lt;/p&gt;
&lt;p&gt;Now we want to create an aggregate Jacoco report for the classes in plugin1 and plugin2 projects (tested by plugin1.tests and plugin2.tests, respectively); each test project will generate a jacoco.exec file with coverage information. Before Jacoco &lt;strong&gt;0.7.7&lt;/strong&gt;, creating an aggregate report wasn’t that easy and required to store all coverage data in a single an .exec file and then use an ant task (with a manual configuration specifying all the source file and class file paths). In 0.7.7, the &lt;strong&gt;jacoco:report-aggregate&lt;/strong&gt; has been added, which makes creating a report really easy!&lt;/p&gt;
&lt;p&gt;Here’s an excerpt of the documentation:&lt;/p&gt;
&lt;div&gt;
&lt;blockquote&gt;&lt;p&gt;Creates a structured code coverage report (HTML, XML, and CSV) from multiple projects within reactor. The report is created from all modules this project depends on. From those projects class and source files as well as JaCoCo execution data files will be collected. […] This also allows to create coverage reports when tests are in separate projects than the code under test. […]&lt;/p&gt;
&lt;p&gt;Using the dependency scope allows to distinguish projects which contribute execution data but should not become part of the report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compile&lt;/code&gt;: Project source and execution data is included in the report.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Only execution data is considered for the report.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;So it’s just a matter of creating a separate project (I called that &lt;strong&gt;example.tests.report&lt;/strong&gt;) where we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configure the &lt;strong&gt;report-aggregate&lt;/strong&gt; goal (in this example I bind that to the &lt;strong&gt;verify&lt;/strong&gt; phase)&lt;/li&gt;
&lt;li&gt;add as dependencies with &lt;strong&gt;scope compile&lt;/strong&gt; the projects containing the actual code and with &lt;strong&gt;scope test&lt;/strong&gt; the projects containing the tests and .exec data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;example.parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
	&amp;lt;/parent&amp;gt;
	&amp;lt;artifactId&amp;gt;example.tests.report&amp;lt;/artifactId&amp;gt;

	&amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;

	&amp;lt;profiles&amp;gt;
		&amp;lt;profile&amp;gt;
			&amp;lt;id&amp;gt;jacoco&amp;lt;/id&amp;gt;
			&amp;lt;activation&amp;gt;
				&amp;lt;activeByDefault&amp;gt;false&amp;lt;/activeByDefault&amp;gt;
			&amp;lt;/activation&amp;gt;
			&amp;lt;build&amp;gt;
				&amp;lt;plugins&amp;gt;
					&amp;lt;plugin&amp;gt;
						&amp;lt;groupId&amp;gt;org.jacoco&amp;lt;/groupId&amp;gt;
						&amp;lt;artifactId&amp;gt;jacoco-maven-plugin&amp;lt;/artifactId&amp;gt;
						&amp;lt;version&amp;gt;${jacoco-version}&amp;lt;/version&amp;gt;
						&amp;lt;executions&amp;gt;
							&amp;lt;execution&amp;gt;
								&amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt;
								&amp;lt;goals&amp;gt;
									&amp;lt;goal&amp;gt;report-aggregate&amp;lt;/goal&amp;gt;
								&amp;lt;/goals&amp;gt;
							&amp;lt;/execution&amp;gt;
						&amp;lt;/executions&amp;gt;
					&amp;lt;/plugin&amp;gt;
				&amp;lt;/plugins&amp;gt;
			&amp;lt;/build&amp;gt;
		&amp;lt;/profile&amp;gt;
	&amp;lt;/profiles&amp;gt;

	&amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;example.plugin1&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
			&amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;example.plugin2&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
			&amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;example.plugin1.tests&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
			&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;example.plugin2.tests&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
			&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;That’s all!&lt;/p&gt;
&lt;p&gt;Now run this command in the example.parent project:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;mvn clean verify -Pjacoco&lt;/pre&gt;&lt;p&gt;and when the build terminates, you’ll find the HTML code coverage report for all your projects in the directory (again, you can configure jacoco with a different output path, that’s just the default):&lt;/p&gt;
&lt;p&gt;/example.tests.report/target/site/jacoco-aggregate&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/jacoco-report/&quot; rel=&quot;attachment wp-att-919&quot;&gt;&lt;img alt=&quot;jacoco-report&quot; class=&quot;aligncenter size-full wp-image-919&quot; height=&quot;208&quot; src=&quot;http://www.lorenzobettini.it/wp-content/uploads/2017/02/jacoco-report.png&quot; width=&quot;1145&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since, besides the HTML report, jacoco will create an XML report, you can use any tool that keeps track of code coverage, like the online free solution &lt;strong&gt;Coveralls&lt;/strong&gt; (&lt;a href=&quot;https://coveralls.io/&quot; target=&quot;_blank&quot;&gt;https://coveralls.io/&lt;/a&gt;). Coveralls is automatically accessible from Travis (I assume that you know how to connect your github projects to Travis and Coveralls). So we just need to configure the coveralls-maven-plugin with the path of the Jacoco xml report (I’m doing this in the parent pom, in the pluginManagement section in the jacoco profile):&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.eluder.coveralls&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;coveralls-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;4.3.0&amp;lt;/version&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;jacocoReports&amp;gt;
			&amp;lt;jacocoReport&amp;gt;${project.basedir}/example.tests.report/target/site/jacoco-aggregate/jacoco.xml&amp;lt;/jacocoReport&amp;gt;
		&amp;lt;/jacocoReports&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/pre&gt;&lt;p&gt;And here’s the Travis file:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sudo: false

language: java

jdk: oraclejdk8

cache:
  directories:
  - $HOME/.m2

install: true

script:
 - mvn -f example.parent/pom.xml clean verify -Pjacoco coveralls:report&lt;/pre&gt;&lt;p&gt;This is the coveralls page for the example project &lt;a href=&quot;https://coveralls.io/github/LorenzoBettini/tycho-multiproject-jacoco-report-example&quot; target=&quot;_blank&quot;&gt;https://coveralls.io/github/LorenzoBettini/tycho-multiproject-jacoco-report-example&lt;/a&gt;. And an example of coverage information:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/jacoco-coveralls/&quot; rel=&quot;attachment wp-att-921&quot;&gt;&lt;img alt=&quot;jacoco-coveralls&quot; class=&quot;aligncenter size-full wp-image-921&quot; height=&quot;539&quot; src=&quot;http://www.lorenzobettini.it/wp-content/uploads/2017/02/jacoco-coveralls.png&quot; width=&quot;765&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s all!&lt;/p&gt;
&lt;p&gt;Happy coverage! &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.2.1/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;sociable&quot;&gt;&lt;div class=&quot;sociable_tagline&quot;&gt;Be Sociable, Share!&lt;/div&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://twitter.com/intent/tweet?text=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects%20-%20http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;t=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;https://mail.google.com/mail/?view=cm&amp;amp;fs=1&amp;amp;to&amp;amp;su=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;body=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;ui=2&amp;amp;tf=1&amp;amp;shva=1&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;email&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; rel=&quot;nofollow&quot; title=&quot;Add to favorites - doesn't work in Chrome&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;StumbleUpon&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://delicious.com/post?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;notes=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Delicious&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/reader/link?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;srcURL=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;srcTitle=Lorenzo+Bettini+My+Home+Page&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Reader&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;source=Lorenzo+Bettini+My+Home+Page&amp;amp;summary=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;amp;Url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;Title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&quot; rel=&quot;nofollow&quot; style=&quot;background-position: 0px 0px;&quot; target=&quot;_blank&quot; title=&quot;BlinkList&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;img src=&quot;http://www.lorenzobettini.it/wp-content/plugins/sociable/images/more.png&quot; /&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;sociable-post-911&quot; style=&quot;display: none;&quot;&gt;   

    &lt;div id=&quot;sociable&quot; style=&quot;display: block;&quot;&gt;



		&lt;div class=&quot;popup&quot;&gt;

			&lt;div class=&quot;content&quot;&gt;

				&lt;ul&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.myspace.com/Modules/PostTo/Pages/?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;t=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Myspace&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://digg.com/submit?phase=2&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;bodytext=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Digg&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reddit.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/bookmarks/mark?op=edit&amp;amp;bkmk=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;annotation=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Bookmarks&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://news.ycombinator.com/submitlink?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;t=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;HackerNews&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reporter.es.msn.com/?fn=contribute&amp;amp;Title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;URL=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;cat_id=6&amp;amp;tag_id=31&amp;amp;Remark=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;MSNReporter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://sphinn.com/index.php?c=post&amp;amp;m=submit&amp;amp;link=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Sphinn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://posterous.com/share?linkto=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;title=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;selection=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Posterous&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.tumblr.com/share?v=3&amp;amp;u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F02%2Fjacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects%2F&amp;amp;t=JaCoCo%20Code%20Coverage%20and%20Report%20of%20multiple%20Eclipse%20plug-in%20projects&amp;amp;s=In%20this%20tutorial%20I%27ll%20show%20how%20to%20use%20Jacoco%20with%20Maven%2FTycho%20to%20create%20a%20code%20coverage%20report%20of%20multiple%20Eclipse%20plug-in%20projects.%0D%0A%0D%0AThe%20code%20of%20the%20example%20is%20available%20here%3A%C2%A0https%3A%2F%2Fgithub.com%2FLorenzoBettini%2Ftycho-multiproject-jacoco-report-exa&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Tumblr&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;			

			&lt;/div&gt;        

		  &lt;a class=&quot;close&quot; style=&quot;cursor: pointer;&quot;&gt;

		  &lt;img src=&quot;http://www.lorenzobettini.it/wp-content/plugins/sociable/images/closelabel.png&quot; title=&quot;close&quot; /&gt;

		  &lt;/a&gt;

		&lt;/div&gt;

	&lt;/div&gt; 

  &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;sociable&quot; style=&quot;float: none;&quot;&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li id=&quot;Twitter_Counter&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/share&quot;&gt;Tweet&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;Facebook_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;Google_p&quot;&gt;&lt;/li&gt;&lt;li id=&quot;LinkedIn_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;StumbleUpon_Counter&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 05 Feb 2017 13:46:12 +0000</pubDate>
</item>
<item>
	<title>Thea Aldrich: HIC SVNT LEONES</title>
	<guid isPermaLink="false">http://theaaaaaa.wordpress.com/?p=28</guid>
	<link>https://theaaaaaa.wordpress.com/2017/02/02/hic-svnt-leones/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This year, LocationTech will not be hosting our annual FOSS4G-NA conference due to the return of the&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;international&lt;/span&gt;&lt;a href=&quot;http://2017.foss4g.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; FOSS4G&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; conference to the United States. We are proud to announce that we are silver sponsors of the event in Boston on August 14-19, 2017. We will be back in 2018 – watch for news on that in the coming months.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With no FOSS4G-NA this year we had the opportunity to focus our attention on developing a new conference concept that blurs the line between an open source and a traditional GIS event. So, LocationTech is thrilled to announce &lt;/span&gt;&lt;a href=&quot;https://calgis2017.locationcon.org/cfp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;CalGIS LocationCon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in Oakland, CA on May 22-25, 2017. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;CalGIS LocationCon 2017 is a co-hosted conference that combines the annual California GIS conference (CalGIS) with LocationCon, which is a new LocationTech event that targets Eclipse Foundation members and others who are focused on the commercial use of open source technology. The event is 4 days, including a full day of workshops at no additional cost, meals, larger audiences and incredible speakers from all over the geospatial industry.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are still accepting presentations and workshop proposals. Get yours in before the deadline!&lt;/span&gt;&lt;a href=&quot;https://calgis2017.locationcon.org/cfp&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Submit yours today. &lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Tracks include:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Business of Geo&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Data: Big, Little and Everything In-between&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Geospatial Education&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Tools and Technology Innovations&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;and much, much more&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;You can learn more about the conference by visiting our&lt;/span&gt;&lt;a href=&quot;https://calgis2017.locationcon.org/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;website&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.Thanks and we look forward to seeing you in Oakland in May!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theaaaaaa.wordpress.com/28/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/theaaaaaa.wordpress.com/28/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=theaaaaaa.wordpress.com&amp;amp;blog=123079642&amp;amp;post=28&amp;amp;subd=theaaaaaa&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 02 Feb 2017 18:38:57 +0000</pubDate>
</item>

</channel>
</rss>
