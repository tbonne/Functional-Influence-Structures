cutoff <- Contours$Z
cutoff <- round(cutoff/max(TempBB$probability)*10000)
cutoff <- append(cutoff, 10000, after = 0)
cutoff <- sort(cutoff, decreasing = FALSE)
cutoff
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T, col=rev(rainbow(10, alpha=0.35)), legend=F, breaks=0.5 )
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T,  legend=F, breaks=c(0.5,0.6,0.7) )
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T,  legend=F, breaks=c(0.1,0.5,0.9) )
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T,  legend=F, breaks=c(0.1,0.5,0.9), alpah=0.35 )
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T,  legend=F,  alpah=0.35 )
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T, col=terrain.colors(10,alpha = 0.35),  legend=F)
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T, col=rev(terrain.colors(10,alpha = 0.35)),  legend=F)
#Overlay
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T, col=rev(terrain.colors(10,alpha = 0.35)), breaks=c(0,0.99), legend=F)
#Overlay
plot(site_sat)
plot(prob.df.latlon$prob$prob, add=T, col=rev(terrain.colors(10,alpha = 0.35)), breaks=c(0.01,1), legend=F)
plot(site_sat)
plot(prob.df.latlon$prob, add=T, col=rev(terrain.colors(10,alpha = 0.35)), breaks=c(0.01,1), legend=F)
plot(site_sat)
plot(prob.df.latlon$prob, add=T, col=rev(terrain.colors(10,alpha = 0.35)), zlim=c(0.05,1), legend=F)
?gmap
df$Ellip.Z^2
### Import Data
#Angle towards ruminators, Foragers, Males, Resources (x4), with time of day, site, and season
df <- read.csv("data/Master_Traj.csv")
#recode season and site measures
df$seasonR <- ifelse(df$season=="dry",0,1)
df$siteR <- ifelse(df$Site=="Global",1,0)
df$Rum.CG.Z[is.na(df$Rum.CG.Z)] <- 0
#turn the importance measure into a measure of eccentricity
df$Ellip.Z <- df$Ellip.Z^2
#display final dataframe
df
df$Ellip.Z
plot(ggplot)
library(ggplot)
library(ggplot2)
df.pubs <- read.csv("Web_of_science_numbers.csv")
df.pubs
ggplot(df.pubs, aes(x=Publication.Years), y=log(Sim+1) ) + geom_point()
df.pubs
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_point()
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line()
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() + geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ))
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) )) +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ))
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) )) +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="green")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="orange4")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red4") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="orange3")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red4") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="blue4")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red4") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="blue3")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red3") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="blue3")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red3") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="blue3") +
labs(y="Log(Number of publications + 1)" , x="Year")
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red3") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="blue3") +
labs(y="Log(Number of publications + 1)" , x="Year") + theme_classic()
ggplot(df.pubs, aes(x=Publication.Years, y=log(Sim+1) )) + geom_line() +
geom_line(aes(x=Publication.Years, y= log(Sim.behav+1) ), color="red3") +
geom_line(aes(x=Publication.Years, y= log(Sim.comp+1) ), color="blue3") +
labs(y="Log(Number of publications + 1)" , x="Year") + theme_classic()
df<-read.csv("WeightsCurrent1.csv")
df
df<-read.csv("WeightsCurrent1.csv")
df
df<-read.csv("WeightsCurrent1.csv") %>% dplyr::select(id, weight_kg)
library(tidyr)
df.wide <- df %>% spread(key=id, value=weight_kg)
df.wide <- df %>% spread(key=id)
df.wide <- df %>% tidyr::spread(key=id, value=weight_kg)
df.wide <- df %>% tidyr::spread(key=id)
df
df.wide <- df %>% tidyr::spread(id, weight_kg)
df.wide <- df[1:30,] %>% tidyr::spread(id, weight_kg)
df.wide
df.wide <- df[1:30,] %>% tidyr::spread(factor(id), weight_kg)
df.wide <- df[1:30,] %>% tidyr::spread(id, weight_kg)
df.wide
df<-read.csv("WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg)
df
df.wide <- df[1:30,] %>% tidyr::spread(id, weight_kg)
df.wide <- df[1:30,] %>% tidyr::spread(key=id, weight_kg)
df.wide <- df[1:30,] %>% tidyr::spread(key=id, value=weight_kg)
df<-read.csv("WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
df
df.wide <- df[1:30,] %>% tidyr::spread(key=id, value=weight_kg)
df.wide
df<-read_csv("WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
library(tidyr)
df<-read_csv("WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
library(tidyvers)
library(tidyvers)
library(tidyverse)
df<-read_csv("WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
df
df.wide <- df[1:30,] %>% tidyr::spread(key=id, value=weight_kg)
df.wide
df.wide <- df[1:30,] %>% spread(key=id, value=weight_kg)
df.wide
df.wide <- df[1:30,] %>% spread(key=id)
df.wide <- df[1:30,] %>% spread(key=id, value=age)
df.wide <- df[1:30,] %>% spread(key=id, value=weight_kg)
df.wide
df.wide <- df[1:40,] %>% spread(key=id, value=weight_kg)
df.wide <- df[1:39,] %>% spread(key=id, value=weight_kg)
df.wide
df.wide <- df %>% spread(key=id, value=weight_kg)
df.wide
library(reshape2)
df<-read_csv("WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
?dcast
?cast
df<-read_csv("data/WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
df<-read_csv("data\WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
df<-read_csv("data/WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
df<-read_csv("test_data/WeightsCurrent1.csv") %>% dplyr::select(id,weight_kg,age)
#required package: http://uc-r.github.io/tidyr
library(reshape2)
#input some rain data. This data is in wide format - each column has rain values for a particular month
df<-read_csv("test_data/Stilbaai_Rain_data_day.csv")
df
library(tidyverse)
#required package: http://uc-r.github.io/tidyr
library(reshape2)
library(tidyverse)
#input some rain data. This data is in wide format - each column has rain values for a particular month
df<-read_csv("test_data/Stilbaai_Rain_data_day.csv")
df
df.long <- melt(df, id.vars = "Day")
df.long
?melt
df.long
observations <- seq(from=1,to=100, by=1)
saveGIF({
for (i in 1:length(observations)) plot(observations[1:i], ylim =c(0,100),xlim=c(0,100))
})
library(animation)
observations <- seq(from=1,to=100, by=1)
saveGIF({
for (i in 1:length(observations)) plot(observations[1:i], ylim =c(0,100),xlim=c(0,100))
})
library(BBMM)
library(maptools)
library(raster)
library(lubridate)
library(rgdal)
library(adehabitatHR)
library(ggmap)
library(rasterVis)
library(dismo)
library(RColorBrewer)
library(dplyr)
library(animation)
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
library(BBMM)
library(maptools)
library(raster)
library(lubridate)
library(rgdal)
library(adehabitatHR)
library(ggmap)
library(rasterVis)
library(dismo)
library(RColorBrewer)
library(dplyr)
library(animation)
library(magick)
Vervets <- read.csv("data/Vervet Points (2011-2017).csv")  # read csv file
#Convert Date/Time to POSIXct format
Vervets$DT.r <- dmy_hm(Vervets$DateTime)
#Create Point Cloud
ver.pnt <- data.frame(x=Vervets$POINT_X, y=Vervets$POINT_Y)
coordinates(ver.pnt) <- ~ x + y # Create a SpatialPointsDataFrame
proj4string(ver.pnt) <- CRS("+proj=utm +zone=35 +south +datum=WGS84") # Define proj as UTM35S WGS84 (EPSG:3275)
#Create container for break point values
# BPV <- data.frame(DFname=-1,c10=-1,c50=-1,c90=-1,c95=-1,c99=-1,max=-1) # Break Point Values dataframe
# BPV <- BPV[-1,] # Remove -1 placeholders
# Create color ramps
CList <- c("Reds","Greens","Blues","Purples","Oranges","Greys")
# ani.options(interval=.05)
saveGIF({
site_sat <- gmap(ver.pnt, zoom = 15, type="satellite") # Get the sat image
GlobNames <- unique(Vervets$TroopID) # Global ID list
wind.size <- 60
wind.step <- 1
FDay <- date(min(Vervets$DT.r)) + days(1050)# Get the first FDay (The first day of the study) ***REMOVE THE + days()***
FInt <- lubridate::interval(FDay,date(max(Vervets$DT.r))) # FInt is the interval of the full dataset, used to check the DoWhile
#repeat{
for(a in 1:20){
s <- stack() # Create a new empty RasterStack
LDay <- date(FDay + days(wind.size)) # Calculate last day of window (LDay)
window = lubridate::interval(FDay,FDay+days(wind.size)) # Create an Interval class for window
TempPeriod <- dplyr::filter(Vervets,Vervets$DT.r%within%window) # Use window to extract TempPeriod
NameList <- unique(TempPeriod$TroopID) # Create a list of ID's used in the i for loop
#Create Global dataframe to store contours, names, etc...
ROT <- data.frame(DFname=-1,c0=-1,c10=-1,c50=-1,c90=-1,c95=-1) # Break Point Values dataframe
ROT <- ROT[-1,] # Remove -1 placeholders
for(i in 1:length(NameList)){
TempTroop <- dplyr::filter(TempPeriod,TroopID == NameList[i]) # Seperate data by troop
td <- diff(TempTroop$DT.r)/60 # Calculate time difference
TempTroop <- TempTroop[-1,] # Remove first row with no td value
TempTroop$TL <-as.numeric(abs(td)) # Add td as a new column called TL (Time Lag), this is req. for BBMM
TempTroop <- TempTroop[TempTroop$TL!=0,] # Remove the zeros time lag (Will not work if TL=0)
TempBB <- brownian.bridge(x=TempTroop$POINT_X, y=TempTroop$POINT_Y, time.lag=TempTroop$TL, location.error=5, cell.size=10, max.lag = 700)
#Plotting
# Used for astetics
contours = bbmm.contour(TempBB, levels=c(10,50,90,95),locations=TempTroop, plot=FALSE) # Levels = one value or a list c(10,50...)
cutoff <- contours$Z
cutoff <- cutoff/max(TempBB$probability)*10000
# Create RastOut table
TempROT <- data.frame(DFname=NameList[i],c0=10000,c10=cutoff[1],c50=cutoff[2],c90=cutoff[3],c95=cutoff[4])
ROT <- rbind(ROT,TempROT)
#create a dataframe with coordinates
prob.df <- data.frame(prob = round(TempBB$probability/max(TempBB$probability)*10000), x=TempBB$x, y=TempBB$y) # Normalized
coordinates(prob.df) <- ~ x + y # Create a SpatialPointsDataFrame
proj4string(prob.df) <- CRS("+proj=utm +zone=35 +south +datum=WGS84") # Define proj as UTM35S WGS84 (EPSG:3275)
gridded(prob.df) <- TRUE # Forcing/coerce points to SpatialPixelsDataFrame
rasterDF <- raster(prob.df) # Create a raster dataframe
temprast <- projectRaster(from=rasterDF,to=site_sat) #Project raster to same as map
s <- addLayer(s,temprast)
}
# Create Map
# URL1 http://rstudio-pubs-static.s3.amazonaws.com/16948_38af70d4c22e45df84a2fd69d8698d93.html
# URL2 http://neondataskills.org/R/Raster-Data-In-R/
if(dir.exists("Temp")==FALSE){dir.create("Temp")}
png(filename=paste0("Temp/BB",a,".png")) # a is a temp fix for ordering images
plot(site_sat)
for(j in 1:nlayers(s)){
CPos <- which(GlobNames == ROT[j,1])
plot(s[[j]], add=T, col=(brewer.pal(4,CList[CPos])),alpha=0.4, legend=F, breaks=ROT[j,2:6])
}
dev.off()
#Increment FDay by one day
FDay <- FDay + days(wind.step)
#if(LDay%within%FInt==TRUE){break}
}
})
load("~/Dropbox/stats/notebooks/Baboon_fertility_and_socialStability/socialStab_fertility_rain_sis.RData")
dens(ind.data$strengthRate)
library(devtools, quietly = T)
library(rethinking)
library(ggplot2, quietly = T)
library(dplyr, quietly = T)
library(mgcv, quietly = T)
library(data.table, quietly = T)
devtools::install_github("tbonne/netTS") #To install the package (run if updates have occured)
library(netTS)
library(stringr)
library(lubridate)
library(reshape2)
library(rstanarm)
library(gamm4)
library(sjPlot)
library(MuMIn)
library(forecast)
library(brms)
library(stringr)
dens(ind.data$strengthRate)
dens(log(ind.data$strengthRate))
stancode(fit.ind.brms.log.1)
stancode(fit.ind.brms.test)
fit.ind.brms.test <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data.sub, family = lognormal, autocor=cor_bsts(formula=~yday|ID), iter=5, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
fit.ind.brms.test <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = lognormal, autocor=cor_bsts(formula=~yday|ID), iter=5, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
stancode(fit.ind.brms.test)
summary(fit.ind.brms.1)#, waic = TRUE)
summary(fit.ind.brms.log)#, waic = TRUE)
summary(fit.ind.brms.test)#, waic = TRUE)
fit.ind.brms.test.2 <- brm(formula = strengthRate ~ s(rain) + rain.mean + s(eigen) + eigen.mean + s(sis) + sis.mean + s(close) + close.mean + s(day_year, bs="cc", k=25) + (1+rain+eigen+sis+close+day_year| ID) , data = ind.data, family = lognormal, autocor=cor_bsts(formula=~yday|ID), iter=20, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.test.2)#, waic = TRUE)
plot(fit.ind.brms.test, ask=F)
fit.ind.brms.test.3 <- brm(formula = strengthRate ~ s(rain) + rain.mean + s(eigen) + eigen.mean + s(sis) + sis.mean + s(close) + close.mean + s(day_year, bs="cc", k=25) + (1+rain+eigen+sis+close+day_year| ID) , data = ind.data, family = lognormal, iter=20, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.test.3)#, waic = TRUE)
plot(fit.ind.brms.test.2, ask=F)
plot(fit.ind.brms.test.3, ask=F)
fit.ind.brms.test.4 <- brm(formula = log(strengthRate) ~ s(rain) + rain.mean + s(eigen) + eigen.mean + s(sis) + sis.mean + s(close) + close.mean + s(day_year, bs="cc", k=25) + (1+rain+eigen+sis+close+day_year| ID) , data = ind.data, family = gaussian, iter=20, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.test.4)#, waic = TRUE)
plot(fit.ind.brms.test.4, ask=F)
fit.ind.brms.test.5 <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = gaussian, autocor=cor_arma(formula=~yday|ID,p=1), iter=20, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.test.5)#, waic = TRUE)
plot(fit.ind.brms.test.5, ask=F)
fit.ind.brms.test.5 <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = gaussian, autocor=cor_arma(formula=~yday|ID,p=1), iter=100, chains=4,cores=4, prior = set_prior("normal(0,1)"), init_r = 0.1) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.test.5)#, waic = TRUE)
plot(fit.ind.brms.test.5, ask=F)
fit.ind.brms.weibull <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = weibull, autocor=cor_bsts(formula=~yday|ID), iter=50, chains=4,cores=4, prior = set_prior("normal(0,1)")) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.weibull)#, waic = TRUE)
summary(fit.ind.brms.test.5)#, waic = TRUE)
plot(fit.ind.brms.weibull, ask=F)
fit.ind.brms.hurdleLog <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = hurdle_lognormal, autocor=cor_bsts(formula=~yday|ID), iter=50, chains=4,cores=4, prior = set_prior("normal(0,1)"))
summary(fit.ind.brms.hurdleLog)#, waic = TRUE)
plot(fit.ind.brms.hurdleLog, ask=F)
dens(log(ind.data$strengthRate))
hist(log(ind.data$strengthRate))
hist((ind.data$strengthRate))
hist((ind.data$strengthRate+1))
fit.ind.brms.logP1 <- brm(formula = strengthRate+1 ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = lognormal, autocor=cor_bsts(formula=~yday|ID), iter=50, chains=4,cores=4, prior = set_prior("normal(0,1)"))
summary(fit.ind.brms.logP1)#, waic = TRUE)
plot(fit.ind.brms.logP1, ask=F)
plot(fit.ind.brms.test.5, ask=F)
summary(fit.ind.brms.hurdleLog)#, waic = TRUE)
summary(fit.ind.brms.logP1)#, waic = TRUE)
fit.ind.brms.logP1 <- brm(formula = strengthRate+0.1 ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = lognormal, autocor=cor_bsts(formula=~yday|ID), iter=150, chains=4,cores=4, prior = set_prior("normal(0,1)"))
summary(fit.ind.brms.logP1)#, waic = TRUE)
plot(fit.ind.brms.logP1, ask=F)
summary(fit.ind.brms.logP1)#, waic = TRUE)
summary(fit.ind.brms.weibull)#, waic = TRUE)
summary(fit.ind.brms.test.5)#, waic = TRUE)
fit.ind.brms.weibull <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = weibull, autocor=cor_bsts(formula=~yday|ID), iter=150, chains=4,cores=4, prior = set_prior("normal(0,1)")) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.weibull)#, waic = TRUE)
plot(fit.ind.brms.weibull, ask=F)
summary(fit.ind.brms.weibull)#, waic = TRUE)
fit.ind.brms.weibull <- brm(formula = strengthRate ~ s(rain.s) + rain.mean + s(eigen.s) + eigen.mean + s(sis.s) + sis.mean + s(close.s) + close.mean + s(day_year.s, bs="cc", k=25) + (1+rain.s+eigen.s+sis.s+close.s+day_year.s| ID) , data = ind.data, family = weibull, autocor=cor_bsts(formula=~yday|ID), iter=1500, chains=4,cores=4, prior = set_prior("normal(0,1)")) #cores=4, chains=4,iter=2000
summary(fit.ind.brms.weibull)#, waic = TRUE)
save.image("~/Desktop/temp_r.RData")
##################################################################################################
# Second simulation: only the linear high res path
setwd("C:/Users/t-work/Documents/GitHub/Functional-Influence-Structures/InfluenceStructures")
#test run: how does group size alter foraging efficiency in leader led structures
N = 500
groupSizes <- rep(50,N)
corePers_small <- rep(0.1,N)
corePers_large <- rep(0.9,N)
pathSize <- rep(25,N)
pathFood <- rep(0.002,N)
steps_per_day = rep(60*60*2,N)
# create progress bar
pb <- txtProgressBar(min = 0, max = N, style = 3)
#set parameters: (path (0/1), groupSize, influenceNet (1:leader, 2:core, 3)random),path size, path food amount, steps per day)
#Get estimates for the parameters from both the path and non-path setups
for(i in 1:N){
#for small core
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_small[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
#for large core
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_large[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
#monitor time
setTxtProgressBar(pb, i)
}
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
library(cowplot)
df.sim <- read.csv("summary_statsb.csv")
df.sim
df.sim.2h <- df.sim %>% filter(Time == 7200 & PathFood == 0.002 & path!=1)
df.sim
df.sim <- read.csv("summary_statsb.csv")
df.sim.5h <- df.sim %>% filter(Time == 18000)
df.sim.2h <- df.sim %>% filter(Time == 7200 & PathFood == 0.002 & path!=1)
df.sim.2h
df.sim.2h %>% group_by(path) %>% tally()
df.sim.2h<-df.sim.2h[-1,]
df.sim.2h %>% group_by(path) %>% tally()
df.sim.2h$path[df.sim.2h$path==10]<-1
df.sim.2h %>% group_by(path) %>% tally()
df.pathNOpath <- df.sim.2h %>% filter(path<=1)
p.test<-ggplot(df.pathNOpath,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_point()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.test
#plot: how does core size influence intake in different environments
p.intake<-ggplot(df.sim.2h,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intake
#plot: how does core size influence variation in intake in different environments
p.intakeSD<-ggplot(df.sim.2h,aes(y=foraginIntakeSD,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intakeSD
cowplot::plot_grid(p.intake,p.intakeSD, nrow=2)
df.sim <- read.csv("summary_statsb.csv")
df.sim.5h <- df.sim %>% filter(Time == 18000)
df.sim.2h <- df.sim %>% filter(Time == 7200 & PathFood == 0.002 & path!=1)
df.sim.2h<-df.sim.2h[-1,]
df.pathNOpath <- df.sim.2h %>% filter(path<=1)
p.test<-ggplot(df.pathNOpath,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_point()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.test
#plot: how does core size influence intake in different environments
p.intake<-ggplot(df.sim.2h,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intake
#plot: how does core size influence variation in intake in different environments
p.intakeSD<-ggplot(df.sim.2h,aes(y=foraginIntakeSD,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intakeSD
cowplot::plot_grid(p.intake,p.intakeSD, nrow=2)
setwd("C:/Users/t-work/Documents/GitHub/Functional-Influence-Structures/InfluenceStructures")
#test run: how does group size alter foraging efficiency in leader led structures
N = 500
groupSizes <- rep(50,N)
corePers_small <- rep(0.1,N)
corePers_large <- rep(0.9,N)
pathSize <- rep(25,N)
pathFood <- rep(0.002,N)
steps_per_day = rep(60*60*2,N)
i=1
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_small[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_small[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_small[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
setwd("C:/Users/t-work/Documents/GitHub/Functional-Influence-Structures/InfluenceStructures")
#test run: how does group size alter foraging efficiency in leader led structures
N = 500
groupSizes <- rep(50,N)
corePers_small <- rep(0.1,N)
corePers_large <- rep(0.9,N)
pathSize <- rep(25,N)
pathFood <- rep(0.002,N)
steps_per_day = rep(60*60*2,N)
# create progress bar
pb <- txtProgressBar(min = 0, max = N, style = 3)
#set parameters: (path (0/1), groupSize, influenceNet (1:leader, 2:core, 3)random),path size, path food amount, steps per day)
#Get estimates for the parameters from both the path and non-path setups
for(i in 1:N){
#for small core
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_small[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
#for large core
#set the parameters and run the non-path model
outcsv <- c(10,groupSizes[i],2,corePers_large[i],pathSize[i],pathFood[i],steps_per_day[i])
write.table(as.matrix(t(outcsv)), sep=",", "data/params.csv", col.names=FALSE, row.names=FALSE)
shell('Run_batch_old_REPAST.bat')
#monitor time
setTxtProgressBar(pb, i)
}
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
library(cowplot)
df.sim <- read.csv("summary_statsb.csv")
df.sim.5h <- df.sim %>% filter(Time == 18000)
df.sim.2h <- df.sim %>% filter(Time == 7200 & PathFood == 0.002 & path!=1)
df.sim.2h<-df.sim.2h[-1,]
df.sim.2h$path[df.sim.2h$path==10]<-1
df.sim.2h %>% group_by(path) %>% tally()
df.pathNOpath <- df.sim.2h %>% filter(path<=1)
p.test<-ggplot(df.pathNOpath,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_point()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.test
#plot: how does core size influence intake in different environments
p.intake<-ggplot(df.sim.2h,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intake
#plot: how does core size influence variation in intake in different environments
p.intakeSD<-ggplot(df.sim.2h,aes(y=foraginIntakeSD,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intakeSD
cowplot::plot_grid(p.intake,p.intakeSD, nrow=2)
#plot: how does core size influence intake in different environments
p.intake<-ggplot(df.sim.2h,aes(y=ForagingIntake,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="Foraging Intake", color="Core size")
p.intake
#plot: how does core size influence variation in intake in different environments
p.intakeSD<-ggplot(df.sim.2h,aes(y=foraginIntakeSD,x=factor(path),color=factor(corePer)))+
geom_violin()+ scale_shape(solid = FALSE)+
theme_classic()+ labs(x="Environmental Structures", y="SD of foraging Intake", color="Core size")
p.intakeSD
cowplot::plot_grid(p.intake,p.intakeSD, nrow=2)
p.intake
p.intake
